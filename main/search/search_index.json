{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#api-stability","title":"API stability","text":"<p> While <code>iden</code> is in development stage, no API is guaranteed to be stable from one release to the next. In fact, it is very likely that the API will change multiple times before a stable 1.0.0 release. In practice, this means that upgrading <code>iden</code> to a new version will possibly break any code that was using the old version of <code>iden</code>.</p>"},{"location":"#license","title":"License","text":"<p><code>iden</code> is licensed under BSD 3-Clause \"New\" or \"Revised\" license available in LICENSE file.</p>"},{"location":"get_started/","title":"Get Started","text":"<p>It is highly recommended to install in a virtual environment to keep your system in order.</p>"},{"location":"get_started/#installing-with-pip-recommended","title":"Installing with <code>pip</code> (recommended)","text":"<p>The following command installs the latest version of the library:</p> <pre><code>pip install iden\n</code></pre> <p>To make the package as slim as possible, only the packages required to use <code>iden</code> are installed. It is possible to install all the optional dependencies by running the following command:</p> <pre><code>pip install 'iden[all]'\n</code></pre> <p>This command also installed NumPy and PyTorch. It is also possible to install the optional packages manually or to select the packages to install. In the following example, only NumPy is installed:</p> <pre><code>pip install iden numpy\n</code></pre>"},{"location":"get_started/#installing-from-source","title":"Installing from source","text":"<p>To install <code>iden</code> from source, you can follow the steps below. First, you will need to install <code>poetry</code>. <code>poetry</code> is used to manage and install the dependencies. If <code>poetry</code> is already installed on your machine, you can skip this step. There are several ways to install <code>poetry</code> so you can use the one that you prefer. You can check the <code>poetry</code> installation by running the following command:</p> <pre><code>poetry --version\n</code></pre> <p>Then, you can clone the git repository:</p> <pre><code>git clone git@github.com:durandtibo/iden.git\n</code></pre> <p>It is recommended to create a Python 3.8+ virtual environment. This step is optional so you can skip it. To create a virtual environment, you can use the following command:</p> <pre><code>make conda\n</code></pre> <p>It automatically creates a conda virtual environment. When the virtual environment is created, you can activate it with the following command:</p> <pre><code>conda activate iden\n</code></pre> <p>This example uses <code>conda</code> to create a virtual environment, but you can use other tools or configurations. Then, you should install the required package to use <code>iden</code> with the following command:</p> <pre><code>make install\n</code></pre> <p>This command will install all the required packages. You can also use this command to update the required packages. This command will check if there is a more recent package available and will install it. Finally, you can test the installation with the following command:</p> <pre><code>make unit-test-cov\n</code></pre>"},{"location":"refs/dataset/","title":"Dataset","text":""},{"location":"refs/dataset/#iden.dataset","title":"iden.dataset","text":"<p>Contain dataset implementations.</p>"},{"location":"refs/dataset/#iden.dataset.BaseDataset","title":"iden.dataset.BaseDataset","text":"<p>             Bases: <code>Generic[T]</code>, <code>ABC</code></p> <p>Define the base class to implement a dataset.</p> <p>Note this dataset class is very different from the PyTorch dataset class because it has a different goal. One of the goals is to help to organize and manage shards.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import tempfile\n&gt;&gt;&gt; from pathlib import Path\n&gt;&gt;&gt; from iden.dataset import VanillaDataset\n&gt;&gt;&gt; from iden.shard import create_json_shard, create_shard_dict, create_shard_tuple\n&gt;&gt;&gt; with tempfile.TemporaryDirectory() as tmpdir:\n...     shards = create_shard_dict(\n...         shards={\n...             \"train\": create_shard_tuple(\n...                 [\n...                     create_json_shard(\n...                         [1, 2, 3], uri=Path(tmpdir).joinpath(\"shard/uri1\").as_uri()\n...                     ),\n...                     create_json_shard(\n...                         [4, 5, 6, 7], uri=Path(tmpdir).joinpath(\"shard/uri2\").as_uri()\n...                     ),\n...                 ],\n...                 uri=Path(tmpdir).joinpath(\"uri_train\").as_uri(),\n...             ),\n...             \"val\": create_shard_tuple(\n...                 shards=[],\n...                 uri=Path(tmpdir).joinpath(\"uri_val\").as_uri(),\n...             ),\n...         },\n...         uri=Path(tmpdir).joinpath(\"uri_shards\").as_uri(),\n...     )\n...     assets = create_shard_dict(\n...         shards={\n...             \"stats\": create_json_shard(\n...                 [1, 2, 3], uri=Path(tmpdir).joinpath(\"uri_stats\").as_uri()\n...             )\n...         },\n...         uri=Path(tmpdir).joinpath(\"uri_assets\").as_uri(),\n...     )\n...     dataset = VanillaDataset(\n...         uri=Path(tmpdir).joinpath(\"uri\").as_uri(), shards=shards, assets=assets\n...     )\n...     dataset\n...\nVanillaDataset(\n  (uri): file:///.../uri\n  (shards): ShardDict(\n      (uri): file:///.../uri_shards\n      (shards):\n        (train): ShardTuple(\n            (uri): file:///.../uri_train\n            (shards):\n              (0): JsonShard(uri=file:///.../shard/uri1)\n              (1): JsonShard(uri=file:///.../shard/uri2)\n          )\n        (val): ShardTuple(\n            (uri): file:///.../uri_val\n            (shards):\n          )\n    )\n  (assets): ShardDict(\n      (uri): file:///.../uri_assets\n      (shards):\n        (stats): JsonShard(uri=file:///.../uri_stats)\n    )\n)\n</code></pre>"},{"location":"refs/dataset/#iden.dataset.BaseDataset.equal","title":"iden.dataset.BaseDataset.equal  <code>abstractmethod</code>","text":"<pre><code>equal(other: Any, equal_nan: bool = False) -&gt; bool\n</code></pre> <p>Indicate if two datasets are equal or not.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>Any</code> <p>The object to compare with.</p> required <code>equal_nan</code> <code>bool</code> <p>If <code>True</code>, then two <code>NaN</code>s will be considered equal.</p> <code>False</code> <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if the two datasets are equal, otherwise <code>False</code>.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import tempfile\n&gt;&gt;&gt; from pathlib import Path\n&gt;&gt;&gt; from iden.dataset import VanillaDataset\n&gt;&gt;&gt; from iden.shard import create_json_shard, create_shard_dict, create_shard_tuple\n&gt;&gt;&gt; with tempfile.TemporaryDirectory() as tmpdir:\n...     shards = create_shard_dict(\n...         shards={\n...             \"train\": create_shard_tuple(\n...                 [\n...                     create_json_shard(\n...                         [1, 2, 3], uri=Path(tmpdir).joinpath(\"shard/uri1\").as_uri()\n...                     ),\n...                     create_json_shard(\n...                         [4, 5, 6, 7], uri=Path(tmpdir).joinpath(\"shard/uri2\").as_uri()\n...                     ),\n...                 ],\n...                 uri=Path(tmpdir).joinpath(\"uri_train\").as_uri(),\n...             ),\n...             \"val\": create_shard_tuple(\n...                 shards=[],\n...                 uri=Path(tmpdir).joinpath(\"uri_val\").as_uri(),\n...             ),\n...         },\n...         uri=Path(tmpdir).joinpath(\"uri_shards\").as_uri(),\n...     )\n...     assets = create_shard_dict(\n...         shards={\n...             \"stats\": create_json_shard(\n...                 [1, 2, 3], uri=Path(tmpdir).joinpath(\"uri_stats\").as_uri()\n...             )\n...         },\n...         uri=Path(tmpdir).joinpath(\"uri_assets\").as_uri(),\n...     )\n...     dataset1 = VanillaDataset(\n...         uri=Path(tmpdir).joinpath(\"uri\").as_uri(), shards=shards, assets=assets\n...     )\n...     dataset2 = VanillaDataset(\n...         uri=Path(tmpdir).joinpath(\"uri2\").as_uri(), shards=shards, assets=assets\n...     )\n...     dataset1.equal(dataset2)\n...\nFalse\n</code></pre>"},{"location":"refs/dataset/#iden.dataset.BaseDataset.get_asset","title":"iden.dataset.BaseDataset.get_asset  <code>abstractmethod</code>","text":"<pre><code>get_asset(asset_id: str) -&gt; Any\n</code></pre> <p>Get a data asset from this sharded dataset.</p> <p>This method is useful to access some data variables/parameters that are not available before to load/preprocess the data.</p> <p>Parameters:</p> Name Type Description Default <code>asset_id</code> <code>str</code> <p>The asset ID used to find the asset.</p> required <p>Returns:</p> Type Description <code>Any</code> <p>The asset.</p> <p>Raises:</p> Type Description <code>AssetNotFoundError</code> <p>if the asset does not exist.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import tempfile\n&gt;&gt;&gt; from pathlib import Path\n&gt;&gt;&gt; from iden.dataset import VanillaDataset\n&gt;&gt;&gt; from iden.shard import create_json_shard, create_shard_dict, create_shard_tuple\n&gt;&gt;&gt; with tempfile.TemporaryDirectory() as tmpdir:\n...     shards = create_shard_dict(\n...         shards={\n...             \"train\": create_shard_tuple(\n...                 [\n...                     create_json_shard(\n...                         [1, 2, 3], uri=Path(tmpdir).joinpath(\"shard/uri1\").as_uri()\n...                     ),\n...                     create_json_shard(\n...                         [4, 5, 6, 7], uri=Path(tmpdir).joinpath(\"shard/uri2\").as_uri()\n...                     ),\n...                 ],\n...                 uri=Path(tmpdir).joinpath(\"uri_train\").as_uri(),\n...             ),\n...             \"val\": create_shard_tuple(\n...                 shards=[],\n...                 uri=Path(tmpdir).joinpath(\"uri_val\").as_uri(),\n...             ),\n...         },\n...         uri=Path(tmpdir).joinpath(\"uri_shards\").as_uri(),\n...     )\n...     assets = create_shard_dict(\n...         shards={\n...             \"stats\": create_json_shard(\n...                 {'mean': 42}, uri=Path(tmpdir).joinpath(\"uri_stats\").as_uri()\n...             )\n...         },\n...         uri=Path(tmpdir).joinpath(\"uri_assets\").as_uri(),\n...     )\n...     dataset = VanillaDataset(uri=Path(tmpdir).joinpath(\"uri\").as_uri(), shards=shards, assets=assets)\n...     dataset.get_asset('stats').get_data()\n...\n{'mean': 42}\n</code></pre>"},{"location":"refs/dataset/#iden.dataset.BaseDataset.get_num_shards","title":"iden.dataset.BaseDataset.get_num_shards  <code>abstractmethod</code>","text":"<pre><code>get_num_shards(split: str) -&gt; int\n</code></pre> <p>Get the number of shards for a given split.</p> <p>Returns:</p> Type Description <code>int</code> <p>The number of shards in the dataset for a given split.</p> <p>Raises:</p> Type Description <code>SplitNotFoundError</code> <p>if the split does not exist.</p> <p>Returns:</p> Type Description <code>int</code> <p>The dataset splits.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import tempfile\n&gt;&gt;&gt; from pathlib import Path\n&gt;&gt;&gt; from iden.dataset import VanillaDataset\n&gt;&gt;&gt; from iden.shard import create_json_shard, create_shard_dict, create_shard_tuple\n&gt;&gt;&gt; with tempfile.TemporaryDirectory() as tmpdir:\n...     shards = create_shard_dict(\n...         shards={\n...             \"train\": create_shard_tuple(\n...                 [\n...                     create_json_shard(\n...                         [1, 2, 3], uri=Path(tmpdir).joinpath(\"shard/uri1\").as_uri()\n...                     ),\n...                     create_json_shard(\n...                         [4, 5, 6, 7], uri=Path(tmpdir).joinpath(\"shard/uri2\").as_uri()\n...                     ),\n...                 ],\n...                 uri=Path(tmpdir).joinpath(\"uri_train\").as_uri(),\n...             ),\n...             \"val\": create_shard_tuple(\n...                 shards=[],\n...                 uri=Path(tmpdir).joinpath(\"uri_val\").as_uri(),\n...             ),\n...         },\n...         uri=Path(tmpdir).joinpath(\"uri_shards\").as_uri(),\n...     )\n...     assets = create_shard_dict(\n...         shards={\n...             \"stats\": create_json_shard(\n...                 {'mean': 42}, uri=Path(tmpdir).joinpath(\"uri_stats\").as_uri()\n...             )\n...         },\n...         uri=Path(tmpdir).joinpath(\"uri_assets\").as_uri(),\n...     )\n...     dataset = VanillaDataset(uri=Path(tmpdir).joinpath(\"uri\").as_uri(), shards=shards, assets=assets)\n...     dataset.get_num_shards('train')\n...     dataset.get_num_shards('val')\n...\n2\n0\n</code></pre>"},{"location":"refs/dataset/#iden.dataset.BaseDataset.get_shards","title":"iden.dataset.BaseDataset.get_shards  <code>abstractmethod</code>","text":"<pre><code>get_shards(split: str) -&gt; tuple[BaseShard[T], ...]\n</code></pre> <p>Get the shards for a given split.</p> <p>Returns:</p> Type Description <code>tuple[BaseShard[T], ...]</code> <p>The shards for a given split. The shards are sorted by ascending order of URI.</p> <p>Raises:</p> Type Description <code>SplitNotFoundError</code> <p>if the split does not exist.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import tempfile\n&gt;&gt;&gt; from pathlib import Path\n&gt;&gt;&gt; from iden.dataset import VanillaDataset\n&gt;&gt;&gt; from iden.shard import create_json_shard, create_shard_dict, create_shard_tuple\n&gt;&gt;&gt; with tempfile.TemporaryDirectory() as tmpdir:\n...     shards = create_shard_dict(\n...         shards={\n...             \"train\": create_shard_tuple(\n...                 [\n...                     create_json_shard(\n...                         [1, 2, 3], uri=Path(tmpdir).joinpath(\"shard/uri1\").as_uri()\n...                     ),\n...                     create_json_shard(\n...                         [4, 5, 6, 7], uri=Path(tmpdir).joinpath(\"shard/uri2\").as_uri()\n...                     ),\n...                 ],\n...                 uri=Path(tmpdir).joinpath(\"uri_train\").as_uri(),\n...             ),\n...             \"val\": create_shard_tuple(\n...                 shards=[],\n...                 uri=Path(tmpdir).joinpath(\"uri_val\").as_uri(),\n...             ),\n...         },\n...         uri=Path(tmpdir).joinpath(\"uri_shards\").as_uri(),\n...     )\n...     assets = create_shard_dict(\n...         shards={\n...             \"stats\": create_json_shard(\n...                 {'mean': 42}, uri=Path(tmpdir).joinpath(\"uri_stats\").as_uri()\n...             )\n...         },\n...         uri=Path(tmpdir).joinpath(\"uri_assets\").as_uri(),\n...     )\n...     dataset = VanillaDataset(uri=Path(tmpdir).joinpath(\"uri\").as_uri(), shards=shards, assets=assets)\n...     dataset.get_shards('train')\n...     dataset.get_shards('val')\n...\n(JsonShard(uri=file:///.../uri1), JsonShard(uri=file:///.../uri2))\n()\n</code></pre>"},{"location":"refs/dataset/#iden.dataset.BaseDataset.get_splits","title":"iden.dataset.BaseDataset.get_splits  <code>abstractmethod</code>","text":"<pre><code>get_splits() -&gt; set[str]\n</code></pre> <p>Get the available dataset splits.</p> <p>Returns:</p> Type Description <code>set[str]</code> <p>The dataset splits.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import tempfile\n&gt;&gt;&gt; from pathlib import Path\n&gt;&gt;&gt; from iden.dataset import VanillaDataset\n&gt;&gt;&gt; from iden.shard import create_json_shard, create_shard_dict, create_shard_tuple\n&gt;&gt;&gt; with tempfile.TemporaryDirectory() as tmpdir:\n...     shards = create_shard_dict(\n...         shards={\n...             \"train\": create_shard_tuple(\n...                 [\n...                     create_json_shard(\n...                         [1, 2, 3], uri=Path(tmpdir).joinpath(\"shard/uri1\").as_uri()\n...                     ),\n...                     create_json_shard(\n...                         [4, 5, 6, 7], uri=Path(tmpdir).joinpath(\"shard/uri2\").as_uri()\n...                     ),\n...                 ],\n...                 uri=Path(tmpdir).joinpath(\"uri_train\").as_uri(),\n...             ),\n...             \"val\": create_shard_tuple(\n...                 shards=[],\n...                 uri=Path(tmpdir).joinpath(\"uri_val\").as_uri(),\n...             ),\n...         },\n...         uri=Path(tmpdir).joinpath(\"uri_shards\").as_uri(),\n...     )\n...     assets = create_shard_dict(\n...         shards={\n...             \"stats\": create_json_shard(\n...                 {'mean': 42}, uri=Path(tmpdir).joinpath(\"uri_stats\").as_uri()\n...             )\n...         },\n...         uri=Path(tmpdir).joinpath(\"uri_assets\").as_uri(),\n...     )\n...     dataset = VanillaDataset(uri=Path(tmpdir).joinpath(\"uri\").as_uri(), shards=shards, assets=assets)\n...     sorted(dataset.get_splits())\n...\n['train', 'val']\n</code></pre>"},{"location":"refs/dataset/#iden.dataset.BaseDataset.get_uri","title":"iden.dataset.BaseDataset.get_uri  <code>abstractmethod</code>","text":"<pre><code>get_uri() -&gt; str\n</code></pre> <p>Get the Uniform Resource Identifier (URI) of the dataset.</p> <p>Returns:</p> Type Description <code>str</code> <p>The dataset's URI.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import tempfile\n&gt;&gt;&gt; from pathlib import Path\n&gt;&gt;&gt; from iden.dataset import VanillaDataset\n&gt;&gt;&gt; from iden.shard import create_json_shard, create_shard_dict, create_shard_tuple\n&gt;&gt;&gt; with tempfile.TemporaryDirectory() as tmpdir:\n...     shards = create_shard_dict(\n...         shards={\n...             \"train\": create_shard_tuple(\n...                 [\n...                     create_json_shard(\n...                         [1, 2, 3], uri=Path(tmpdir).joinpath(\"shard/uri1\").as_uri()\n...                     ),\n...                     create_json_shard(\n...                         [4, 5, 6, 7], uri=Path(tmpdir).joinpath(\"shard/uri2\").as_uri()\n...                     ),\n...                 ],\n...                 uri=Path(tmpdir).joinpath(\"uri_train\").as_uri(),\n...             ),\n...             \"val\": create_shard_tuple(\n...                 shards=[],\n...                 uri=Path(tmpdir).joinpath(\"uri_val\").as_uri(),\n...             ),\n...         },\n...         uri=Path(tmpdir).joinpath(\"uri_shards\").as_uri(),\n...     )\n...     assets = create_shard_dict(\n...         shards={\n...             \"stats\": create_json_shard(\n...                 {'mean': 42}, uri=Path(tmpdir).joinpath(\"uri_stats\").as_uri()\n...             )\n...         },\n...         uri=Path(tmpdir).joinpath(\"uri_assets\").as_uri(),\n...     )\n...     dataset = VanillaDataset(uri=Path(tmpdir).joinpath(\"uri\").as_uri(), shards=shards, assets=assets)\n...     dataset.get_uri()\n...\nfile:///.../uri\n</code></pre>"},{"location":"refs/dataset/#iden.dataset.BaseDataset.has_asset","title":"iden.dataset.BaseDataset.has_asset  <code>abstractmethod</code>","text":"<pre><code>has_asset(asset_id: str) -&gt; bool\n</code></pre> <p>Indicate if the asset exists or not.</p> <p>Parameters:</p> Name Type Description Default <code>asset_id</code> <code>str</code> <p>The asset ID used to find the asset.</p> required <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if the asset exists, otherwise <code>False</code>.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import tempfile\n&gt;&gt;&gt; from pathlib import Path\n&gt;&gt;&gt; from iden.dataset import VanillaDataset\n&gt;&gt;&gt; from iden.shard import create_json_shard, create_shard_dict, create_shard_tuple\n&gt;&gt;&gt; with tempfile.TemporaryDirectory() as tmpdir:\n...     shards = create_shard_dict(\n...         shards={\n...             \"train\": create_shard_tuple(\n...                 [\n...                     create_json_shard(\n...                         [1, 2, 3], uri=Path(tmpdir).joinpath(\"shard/uri1\").as_uri()\n...                     ),\n...                     create_json_shard(\n...                         [4, 5, 6, 7], uri=Path(tmpdir).joinpath(\"shard/uri2\").as_uri()\n...                     ),\n...                 ],\n...                 uri=Path(tmpdir).joinpath(\"uri_train\").as_uri(),\n...             ),\n...             \"val\": create_shard_tuple(\n...                 shards=[],\n...                 uri=Path(tmpdir).joinpath(\"uri_val\").as_uri(),\n...             ),\n...         },\n...         uri=Path(tmpdir).joinpath(\"uri_shards\").as_uri(),\n...     )\n...     assets = create_shard_dict(\n...         shards={\n...             \"stats\": create_json_shard(\n...                 {'mean': 42}, uri=Path(tmpdir).joinpath(\"uri_stats\").as_uri()\n...             )\n...         },\n...         uri=Path(tmpdir).joinpath(\"uri_assets\").as_uri(),\n...     )\n...     dataset = VanillaDataset(uri=Path(tmpdir).joinpath(\"uri\").as_uri(), shards=shards, assets=assets)\n...     dataset.has_asset('stats')\n...     dataset.has_asset('missing')\n...\nTrue\nFalse\n</code></pre>"},{"location":"refs/dataset/#iden.dataset.BaseDataset.has_split","title":"iden.dataset.BaseDataset.has_split  <code>abstractmethod</code>","text":"<pre><code>has_split(split: str) -&gt; bool\n</code></pre> <p>Indicate if a dataset split exists or not.</p> <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> of the split exists, otherwise <code>False</code></p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import tempfile\n&gt;&gt;&gt; from pathlib import Path\n&gt;&gt;&gt; from iden.dataset import VanillaDataset\n&gt;&gt;&gt; from iden.shard import create_json_shard, create_shard_dict, create_shard_tuple\n&gt;&gt;&gt; with tempfile.TemporaryDirectory() as tmpdir:\n...     shards = create_shard_dict(\n...         shards={\n...             \"train\": create_shard_tuple(\n...                 [\n...                     create_json_shard(\n...                         [1, 2, 3], uri=Path(tmpdir).joinpath(\"shard/uri1\").as_uri()\n...                     ),\n...                     create_json_shard(\n...                         [4, 5, 6, 7], uri=Path(tmpdir).joinpath(\"shard/uri2\").as_uri()\n...                     ),\n...                 ],\n...                 uri=Path(tmpdir).joinpath(\"uri_train\").as_uri(),\n...             ),\n...             \"val\": create_shard_tuple(\n...                 shards=[],\n...                 uri=Path(tmpdir).joinpath(\"uri_val\").as_uri(),\n...             ),\n...         },\n...         uri=Path(tmpdir).joinpath(\"uri_shards\").as_uri(),\n...     )\n...     assets = create_shard_dict(\n...         shards={\n...             \"stats\": create_json_shard(\n...                 {'mean': 42}, uri=Path(tmpdir).joinpath(\"uri_stats\").as_uri()\n...             )\n...         },\n...         uri=Path(tmpdir).joinpath(\"uri_assets\").as_uri(),\n...     )\n...     dataset = VanillaDataset(uri=Path(tmpdir).joinpath(\"uri\").as_uri(), shards=shards, assets=assets)\n...     dataset.has_split('train')\n...     dataset.has_split('missing')\n...\nTrue\nFalse\n</code></pre>"},{"location":"refs/dataset/#iden.dataset.VanillaDataset","title":"iden.dataset.VanillaDataset","text":"<p>             Bases: <code>BaseDataset[T]</code></p> <p>Implement a simple dataset.</p> <p>Parameters:</p> Name Type Description Default <code>uri</code> <code>str</code> <p>The URI associated to the dataset.</p> required <code>shards</code> <code>ShardDict[ShardTuple[BaseShard[T]]]</code> <p>The dataset's shards. Each item in the mapping represent a dataset split, where the key is the dataset split and the value is the shards.</p> required <code>assets</code> <code>ShardDict</code> <p>The dataset's assets.</p> required <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import tempfile\n&gt;&gt;&gt; from pathlib import Path\n&gt;&gt;&gt; from iden.dataset import VanillaDataset\n&gt;&gt;&gt; from iden.shard import create_json_shard, create_shard_dict, create_shard_tuple\n&gt;&gt;&gt; with tempfile.TemporaryDirectory() as tmpdir:\n...     shards = create_shard_dict(\n...         shards={\n...             \"train\": create_shard_tuple(\n...                 [\n...                     create_json_shard(\n...                         [1, 2, 3], uri=Path(tmpdir).joinpath(\"shard/uri1\").as_uri()\n...                     ),\n...                     create_json_shard(\n...                         [4, 5, 6, 7], uri=Path(tmpdir).joinpath(\"shard/uri2\").as_uri()\n...                     ),\n...                 ],\n...                 uri=Path(tmpdir).joinpath(\"uri_train\").as_uri(),\n...             ),\n...             \"val\": create_shard_tuple(\n...                 shards=[],\n...                 uri=Path(tmpdir).joinpath(\"uri_val\").as_uri(),\n...             ),\n...         },\n...         uri=Path(tmpdir).joinpath(\"uri_shards\").as_uri(),\n...     )\n...     assets = create_shard_dict(\n...         shards={\n...             \"stats\": create_json_shard(\n...                 [1, 2, 3], uri=Path(tmpdir).joinpath(\"uri_stats\").as_uri()\n...             )\n...         },\n...         uri=Path(tmpdir).joinpath(\"uri_assets\").as_uri(),\n...     )\n...     dataset = VanillaDataset(\n...         uri=Path(tmpdir).joinpath(\"uri\").as_uri(), shards=shards, assets=assets\n...     )\n...     dataset\n...\nVanillaDataset(\n  (uri): file:///.../uri\n  (shards): ShardDict(\n      (uri): file:///.../uri_shards\n      (shards):\n        (train): ShardTuple(\n            (uri): file:///.../uri_train\n            (shards):\n              (0): JsonShard(uri=file:///.../shard/uri1)\n              (1): JsonShard(uri=file:///.../shard/uri2)\n          )\n        (val): ShardTuple(\n            (uri): file:///.../uri_val\n            (shards):\n          )\n    )\n  (assets): ShardDict(\n      (uri): file:///.../uri_assets\n      (shards):\n        (stats): JsonShard(uri=file:///.../uri_stats)\n    )\n)\n</code></pre>"},{"location":"refs/dataset/#iden.dataset.VanillaDataset.from_uri","title":"iden.dataset.VanillaDataset.from_uri  <code>classmethod</code>","text":"<pre><code>from_uri(uri: str) -&gt; VanillaDataset\n</code></pre> <p>Instantiate a shard from its URI.</p> <p>Parameters:</p> Name Type Description Default <code>uri</code> <code>str</code> <p>The URI.</p> required <p>Returns:</p> Type Description <code>VanillaDataset</code> <p>The instantiated shard.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import tempfile\n&gt;&gt;&gt; from pathlib import Path\n&gt;&gt;&gt; from iden.dataset import create_vanilla_dataset\n&gt;&gt;&gt; from iden.shard import create_json_shard, create_shard_dict, create_shard_tuple\n&gt;&gt;&gt; with tempfile.TemporaryDirectory() as tmpdir:\n...     shards = create_shard_dict(\n...         shards={\n...             \"train\": create_shard_tuple(\n...                 [\n...                     create_json_shard(\n...                         [1, 2, 3], uri=Path(tmpdir).joinpath(\"shard/uri1\").as_uri()\n...                     ),\n...                     create_json_shard(\n...                         [4, 5, 6, 7], uri=Path(tmpdir).joinpath(\"shard/uri2\").as_uri()\n...                     ),\n...                 ],\n...                 uri=Path(tmpdir).joinpath(\"uri_train\").as_uri(),\n...             ),\n...             \"val\": create_shard_tuple(\n...                 shards=[],\n...                 uri=Path(tmpdir).joinpath(\"uri_val\").as_uri(),\n...             ),\n...         },\n...         uri=Path(tmpdir).joinpath(\"uri_shards\").as_uri(),\n...     )\n...     assets = create_shard_dict(\n...         shards={\n...             \"stats\": create_json_shard(\n...                 [1, 2, 3], uri=Path(tmpdir).joinpath(\"uri_stats\").as_uri()\n...             )\n...         },\n...         uri=Path(tmpdir).joinpath(\"uri_assets\").as_uri(),\n...     )\n...     uri = Path(tmpdir).joinpath(\"uri\").as_uri()\n...     _ = create_vanilla_dataset(uri=uri, shards=shards, assets=assets)\n...     dataset = VanillaDataset.from_uri(uri)\n...     dataset\n...\nVanillaDataset(\n  (uri): file:///.../uri\n  (shards): ShardDict(\n      (uri): file:///.../uri_shards\n      (shards):\n        (train): ShardTuple(\n            (uri): file:///.../uri_train\n            (shards):\n              (0): JsonShard(uri=file:///.../shard/uri1)\n              (1): JsonShard(uri=file:///.../shard/uri2)\n          )\n        (val): ShardTuple(\n            (uri): file:///.../uri_val\n            (shards):\n          )\n    )\n  (assets): ShardDict(\n      (uri): file:///.../uri_assets\n      (shards):\n        (stats): JsonShard(uri=file:///.../uri_stats)\n    )\n)\n</code></pre>"},{"location":"refs/dataset/#iden.dataset.VanillaDataset.generate_uri_config","title":"iden.dataset.VanillaDataset.generate_uri_config  <code>classmethod</code>","text":"<pre><code>generate_uri_config(\n    shards: ShardDict[ShardTuple[BaseShard[T]]],\n    assets: ShardDict,\n) -&gt; dict\n</code></pre> <p>Generate the minimal config that is used to load the dataset from its URI.</p> <p>The config must be compatible with the JSON format.</p> <p>Parameters:</p> Name Type Description Default <code>shards</code> <code>ShardDict[ShardTuple[BaseShard[T]]]</code> <p>The shards in the dataset. Each item in the mapping represent a dataset split, where the key is the dataset split and the value is the shards.</p> required <code>assets</code> <code>ShardDict</code> <p>The dataset's assets.</p> required <p>Returns:</p> Type Description <code>dict</code> <p>The minimal config to load the shard from its URI.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import tempfile\n&gt;&gt;&gt; from pathlib import Path\n&gt;&gt;&gt; from iden.dataset import VanillaDataset\n&gt;&gt;&gt; from iden.shard import create_json_shard, create_shard_dict, create_shard_tuple\n&gt;&gt;&gt; with tempfile.TemporaryDirectory() as tmpdir:\n...     shards = create_shard_dict(\n...         shards={\n...             \"train\": create_shard_tuple(\n...                 [\n...                     create_json_shard(\n...                         [1, 2, 3], uri=Path(tmpdir).joinpath(\"shard/uri1\").as_uri()\n...                     ),\n...                     create_json_shard(\n...                         [4, 5, 6, 7], uri=Path(tmpdir).joinpath(\"shard/uri2\").as_uri()\n...                     ),\n...                 ],\n...                 uri=Path(tmpdir).joinpath(\"uri_train\").as_uri(),\n...             ),\n...             \"val\": create_shard_tuple(\n...                 shards=[],\n...                 uri=Path(tmpdir).joinpath(\"uri_val\").as_uri(),\n...             ),\n...         },\n...         uri=Path(tmpdir).joinpath(\"uri_shards\").as_uri(),\n...     )\n...     assets = create_shard_dict(\n...         shards={\n...             \"stats\": create_json_shard(\n...                 [1, 2, 3], uri=Path(tmpdir).joinpath(\"uri_stats\").as_uri()\n...             )\n...         },\n...         uri=Path(tmpdir).joinpath(\"uri_assets\").as_uri(),\n...     )\n...     config = VanillaDataset.generate_uri_config(shards=shards, assets=assets)\n...     config\n...\n{'loader': {'_target_': 'iden.dataset.loader.VanillaDatasetLoader'},\n 'shards': 'file:///.../uri_shards',\n 'assets': 'file:///.../uri_assets'}\n</code></pre>"},{"location":"refs/dataset/#iden.dataset.create_vanilla_dataset","title":"iden.dataset.create_vanilla_dataset","text":"<pre><code>create_vanilla_dataset(\n    shards: ShardDict[ShardTuple[BaseShard[T]]],\n    assets: ShardDict,\n    uri: str,\n) -&gt; VanillaDataset\n</code></pre> <p>Create a <code>VanillaDataset</code> from its shards.</p> Note <p>It is a utility function to create a <code>VanillaDataset</code> from     its shards and URI. It is possible to create a     <code>VanillaDataset</code> in other ways.</p> <p>Parameters:</p> Name Type Description Default <code>shards</code> <code>ShardDict[ShardTuple[BaseShard[T]]]</code> <p>The dataset's shards. Each item in the mapping represent a dataset split, where the key is the dataset split and the value is the shards.</p> required <code>assets</code> <code>ShardDict</code> <p>The dataset's assets.</p> required <code>uri</code> <code>str</code> <p>The URI associated to the dataset.</p> required <p>Returns:</p> Type Description <code>VanillaDataset</code> <p>The instantited <code>VanillaDataset</code> object.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import tempfile\n&gt;&gt;&gt; from pathlib import Path\n&gt;&gt;&gt; from iden.dataset import create_vanilla_dataset\n&gt;&gt;&gt; from iden.shard import create_json_shard, create_shard_dict, create_shard_tuple\n&gt;&gt;&gt; with tempfile.TemporaryDirectory() as tmpdir:\n...     shards = create_shard_dict(\n...         shards={\n...             \"train\": create_shard_tuple(\n...                 [\n...                     create_json_shard(\n...                         [1, 2, 3], uri=Path(tmpdir).joinpath(\"shard/uri1\").as_uri()\n...                     ),\n...                     create_json_shard(\n...                         [4, 5, 6, 7], uri=Path(tmpdir).joinpath(\"shard/uri2\").as_uri()\n...                     ),\n...                 ],\n...                 uri=Path(tmpdir).joinpath(\"uri_train\").as_uri(),\n...             ),\n...             \"val\": create_shard_tuple(\n...                 shards=[],\n...                 uri=Path(tmpdir).joinpath(\"uri_val\").as_uri(),\n...             ),\n...         },\n...         uri=Path(tmpdir).joinpath(\"uri_shards\").as_uri(),\n...     )\n...     assets = create_shard_dict(\n...         shards={\n...             \"stats\": create_json_shard(\n...                 [1, 2, 3], uri=Path(tmpdir).joinpath(\"uri_stats\").as_uri()\n...             )\n...         },\n...         uri=Path(tmpdir).joinpath(\"uri_assets\").as_uri(),\n...     )\n...     dataset = create_vanilla_dataset(\n...         uri=Path(tmpdir).joinpath(\"uri\").as_uri(), shards=shards, assets=assets\n...     )\n...     dataset\n...\nVanillaDataset(\n  (uri): file:///.../uri\n  (shards): ShardDict(\n      (uri): file:///.../uri_shards\n      (shards):\n        (train): ShardTuple(\n            (uri): file:///.../uri_train\n            (shards):\n              (0): JsonShard(uri=file:///.../shard/uri1)\n              (1): JsonShard(uri=file:///.../shard/uri2)\n          )\n        (val): ShardTuple(\n            (uri): file:///.../uri_val\n            (shards):\n          )\n    )\n  (assets): ShardDict(\n      (uri): file:///.../uri_assets\n      (shards):\n        (stats): JsonShard(uri=file:///.../uri_stats)\n    )\n)\n</code></pre>"},{"location":"refs/dataset/#iden.dataset.load_from_uri","title":"iden.dataset.load_from_uri","text":"<pre><code>load_from_uri(uri: str) -&gt; BaseDataset\n</code></pre> <p>Load a dataset from its Uniform Resource Identifier (URI).</p> <p>Parameters:</p> Name Type Description Default <code>uri</code> <code>str</code> <p>The URI of the dataset.</p> required <p>Returns:</p> Type Description <code>BaseDataset</code> <p>The dataset associated to the URI.</p> <p>Raises:</p> Type Description <code>FileNotFoundError</code> <p>if the URI file does not exist.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import tempfile\n&gt;&gt;&gt; from pathlib import Path\n&gt;&gt;&gt; from iden.dataset import create_vanilla_dataset, load_from_uri\n&gt;&gt;&gt; from iden.shard import create_json_shard, create_shard_dict, create_shard_tuple\n&gt;&gt;&gt; with tempfile.TemporaryDirectory() as tmpdir:\n...     shards = create_shard_dict(\n...         shards={\n...             \"train\": create_shard_tuple(\n...                 [\n...                     create_json_shard(\n...                         [1, 2, 3], uri=Path(tmpdir).joinpath(\"shard/uri1\").as_uri()\n...                     ),\n...                     create_json_shard(\n...                         [4, 5, 6, 7], uri=Path(tmpdir).joinpath(\"shard/uri2\").as_uri()\n...                     ),\n...                 ],\n...                 uri=Path(tmpdir).joinpath(\"uri_train\").as_uri(),\n...             ),\n...             \"val\": create_shard_tuple(\n...                 shards=[],\n...                 uri=Path(tmpdir).joinpath(\"uri_val\").as_uri(),\n...             ),\n...         },\n...         uri=Path(tmpdir).joinpath(\"uri_shards\").as_uri(),\n...     )\n...     assets = create_shard_dict(\n...         shards={\n...             \"stats\": create_json_shard(\n...                 [1, 2, 3], uri=Path(tmpdir).joinpath(\"uri_stats\").as_uri()\n...             )\n...         },\n...         uri=Path(tmpdir).joinpath(\"uri_assets\").as_uri(),\n...     )\n...     uri = Path(tmpdir).joinpath(\"uri\").as_uri()\n...     _ = create_vanilla_dataset(uri=uri, shards=shards, assets=assets)\n...     dataset = load_from_uri(uri)\n...     dataset\n...\nVanillaDataset(\n  (uri): file:///.../uri\n  (shards): ShardDict(\n      (uri): file:///.../uri_shards\n      (shards):\n        (train): ShardTuple(\n            (uri): file:///.../uri_train\n            (shards):\n              (0): JsonShard(uri=file:///.../shard/uri1)\n              (1): JsonShard(uri=file:///.../shard/uri2)\n          )\n        (val): ShardTuple(\n            (uri): file:///.../uri_val\n            (shards):\n          )\n    )\n  (assets): ShardDict(\n      (uri): file:///.../uri_assets\n      (shards):\n        (stats): JsonShard(uri=file:///.../uri_stats)\n    )\n)\n</code></pre>"},{"location":"refs/io/","title":"I/O","text":""},{"location":"refs/io/#iden.io","title":"iden.io","text":"<p>Contain data loaders and savers.</p>"},{"location":"refs/io/#iden.io.AutoFileLoader","title":"iden.io.AutoFileLoader","text":"<p>             Bases: <code>BaseLoader[Any]</code></p> <p>Implement a data loader to load data based on the file extension.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import tempfile\n&gt;&gt;&gt; from pathlib import Path\n&gt;&gt;&gt; from iden.io import save_json, AutoFileLoader\n&gt;&gt;&gt; with tempfile.TemporaryDirectory() as tmpdir:\n...     path = Path(tmpdir).joinpath(\"data.json\")\n...     save_json({\"key1\": [1, 2, 3], \"key2\": \"abc\"}, path)\n...     loader = AutoFileLoader()\n...     data = loader.load(path)\n...     data\n...\n{'key1': [1, 2, 3], 'key2': 'abc'}\n</code></pre>"},{"location":"refs/io/#iden.io.AutoFileLoader.add_loader","title":"iden.io.AutoFileLoader.add_loader  <code>classmethod</code>","text":"<pre><code>add_loader(\n    extension: str,\n    loader: BaseLoader,\n    exist_ok: bool = False,\n) -&gt; None\n</code></pre> <p>Add a loader for a given file extension.</p> <p>Parameters:</p> Name Type Description Default <code>extension</code> <code>str</code> <p>The file extension.</p> required <code>loader</code> <code>BaseLoader</code> <p>The loader to use for the given file extension.</p> required <code>exist_ok</code> <code>bool</code> <p>If <code>False</code>, <code>RuntimeError</code> is raised if the extension already exists. This parameter should be set to <code>True</code> to overwrite the loader for an extension.</p> <code>False</code> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>if a loader is already registered for the extension and <code>exist_ok=False</code>.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from iden.io import AutoFileLoader, TextLoader\n&gt;&gt;&gt; AutoFileLoader.add_loader(\"text\", TextLoader())\n</code></pre>"},{"location":"refs/io/#iden.io.AutoFileLoader.find_loader","title":"iden.io.AutoFileLoader.find_loader  <code>classmethod</code>","text":"<pre><code>find_loader(extension: str) -&gt; BaseLoader\n</code></pre> <p>Find the loader associated to the file extension.</p> <p>Parameters:</p> Name Type Description Default <code>extension</code> <code>str</code> <p>The file extension.</p> required <p>Returns:</p> Type Description <code>BaseLoader</code> <p>The loader for the given file extension.</p> <p>Raises:</p> Type Description <code>TypeError</code> <p>if the file extension is not registered.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from iden.io import AutoFileLoader\n&gt;&gt;&gt; AutoFileLoader.find_loader(\"txt\")\nTextLoader()\n&gt;&gt;&gt; AutoFileLoader.find_loader(\"json\")\nJsonLoader()\n</code></pre>"},{"location":"refs/io/#iden.io.AutoFileLoader.has_loader","title":"iden.io.AutoFileLoader.has_loader  <code>classmethod</code>","text":"<pre><code>has_loader(extension: str) -&gt; bool\n</code></pre> <p>Indicate if a loader is registered for the given file extension.</p> <p>Parameters:</p> Name Type Description Default <code>extension</code> <code>str</code> <p>The file extension.</p> required <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if a loader comparator is registered, otherwise <code>False</code>.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from iden.io import AutoFileLoader\n&gt;&gt;&gt; AutoFileLoader.has_loader(\"txt\")\nTrue\n&gt;&gt;&gt; AutoFileLoader.has_loader(\"newtxt\")\nFalse\n</code></pre>"},{"location":"refs/io/#iden.io.BaseFileSaver","title":"iden.io.BaseFileSaver","text":"<p>             Bases: <code>BaseSaver[T]</code></p> <p>Define the base class to implement a file saver.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import tempfile\n&gt;&gt;&gt; from pathlib import Path\n&gt;&gt;&gt; from iden.io import JsonSaver, JsonLoader\n&gt;&gt;&gt; with tempfile.TemporaryDirectory() as tmpdir:\n...     path = Path(tmpdir).joinpath(\"data.json\")\n...     JsonSaver().save({\"key1\": [1, 2, 3], \"key2\": \"abc\"}, path)\n...     data = JsonLoader().load(path)\n...     data\n...\n{'key1': [1, 2, 3], 'key2': 'abc'}\n</code></pre>"},{"location":"refs/io/#iden.io.BaseFileSaver.save","title":"iden.io.BaseFileSaver.save","text":"<pre><code>save(\n    to_save: T, path: Path, *, exist_ok: bool = False\n) -&gt; None\n</code></pre> <p>Save the data into the given path.</p> <p>Parameters:</p> Name Type Description Default <code>to_save</code> <code>T</code> <p>The data to save. The data should be compatible with the saving engine.</p> required <code>path</code> <code>Path</code> <p>Specifies the path where to save the data.</p> required <code>exist_ok</code> <code>bool</code> <p>If <code>exist_ok</code> is <code>False</code> (the default), <code>FileExistsError</code> is raised if the target file already exists. If <code>exist_ok</code> is <code>True</code>, <code>FileExistsError</code> will not be raised unless the given path already exists in the file system and is not a file.</p> <code>False</code> <p>Raises:</p> Type Description <code>FileExistsError</code> <p>if the file already exists.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import tempfile\n&gt;&gt;&gt; from pathlib import Path\n&gt;&gt;&gt; from iden.io import JsonSaver, JsonLoader\n&gt;&gt;&gt; with tempfile.TemporaryDirectory() as tmpdir:\n...     path = Path(tmpdir).joinpath(\"data.json\")\n...     JsonSaver().save({\"key1\": [1, 2, 3], \"key2\": \"abc\"}, path)\n...     data = JsonLoader().load(path)\n...     data\n...\n{'key1': [1, 2, 3], 'key2': 'abc'}\n</code></pre>"},{"location":"refs/io/#iden.io.BaseLoader","title":"iden.io.BaseLoader","text":"<p>             Bases: <code>Generic[T]</code>, <code>ABC</code></p> <p>Define the base class to implement a data loader.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import tempfile\n&gt;&gt;&gt; from pathlib import Path\n&gt;&gt;&gt; from iden.io import save_json, JsonLoader\n&gt;&gt;&gt; with tempfile.TemporaryDirectory() as tmpdir:\n...     path = Path(tmpdir).joinpath(\"data.json\")\n...     save_json({\"key1\": [1, 2, 3], \"key2\": \"abc\"}, path)\n...     data = JsonLoader().load(path)\n...     data\n...\n{'key1': [1, 2, 3], 'key2': 'abc'}\n</code></pre>"},{"location":"refs/io/#iden.io.BaseLoader.load","title":"iden.io.BaseLoader.load  <code>abstractmethod</code>","text":"<pre><code>load(path: Path) -&gt; T\n</code></pre> <p>Save the data into the given path.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>Path</code> <p>The path with the data to load.</p> required <p>Returns:</p> Type Description <code>T</code> <p>The data</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import tempfile\n&gt;&gt;&gt; from pathlib import Path\n&gt;&gt;&gt; from iden.io import save_json, JsonLoader\n&gt;&gt;&gt; with tempfile.TemporaryDirectory() as tmpdir:\n...     path = Path(tmpdir).joinpath(\"data.json\")\n...     save_json({\"key1\": [1, 2, 3], \"key2\": \"abc\"}, path)\n...     data = JsonLoader().load(path)\n...     data\n...\n{'key1': [1, 2, 3], 'key2': 'abc'}\n</code></pre>"},{"location":"refs/io/#iden.io.BaseSaver","title":"iden.io.BaseSaver","text":"<p>             Bases: <code>Generic[T]</code>, <code>ABC</code></p> <p>Define the base class to implement a data saver.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import tempfile\n&gt;&gt;&gt; from pathlib import Path\n&gt;&gt;&gt; from iden.io import JsonSaver, JsonLoader\n&gt;&gt;&gt; with tempfile.TemporaryDirectory() as tmpdir:\n...     path = Path(tmpdir).joinpath(\"data.json\")\n...     JsonSaver().save({\"key1\": [1, 2, 3], \"key2\": \"abc\"}, path)\n...     data = JsonLoader().load(path)\n...     data\n...\n{'key1': [1, 2, 3], 'key2': 'abc'}\n</code></pre>"},{"location":"refs/io/#iden.io.BaseSaver.save","title":"iden.io.BaseSaver.save  <code>abstractmethod</code>","text":"<pre><code>save(\n    to_save: T, path: Path, *, exist_ok: bool = False\n) -&gt; None\n</code></pre> <p>Save the data into the given path.</p> <p>Parameters:</p> Name Type Description Default <code>to_save</code> <code>T</code> <p>The data to save. The data should be compatible with the saving engine.</p> required <code>path</code> <code>Path</code> <p>Specifies the path where to save the data.</p> required <code>exist_ok</code> <code>bool</code> <p>If <code>exist_ok</code> is <code>False</code> (the default), an exception is raised if the target path already exists.</p> <code>False</code> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import tempfile\n&gt;&gt;&gt; from pathlib import Path\n&gt;&gt;&gt; from iden.io import JsonSaver, JsonLoader\n&gt;&gt;&gt; with tempfile.TemporaryDirectory() as tmpdir:\n...     path = Path(tmpdir).joinpath(\"data.json\")\n...     JsonSaver().save({\"key1\": [1, 2, 3], \"key2\": \"abc\"}, path)\n...     data = JsonLoader().load(path)\n...     data\n...\n{'key1': [1, 2, 3], 'key2': 'abc'}\n</code></pre>"},{"location":"refs/io/#iden.io.JsonLoader","title":"iden.io.JsonLoader","text":"<p>             Bases: <code>BaseLoader[Any]</code></p> <p>Implement a data loader to load data in a JSON file.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import tempfile\n&gt;&gt;&gt; from pathlib import Path\n&gt;&gt;&gt; from iden.io import save_json, JsonLoader\n&gt;&gt;&gt; with tempfile.TemporaryDirectory() as tmpdir:\n...     path = Path(tmpdir).joinpath(\"data.json\")\n...     save_json({\"key1\": [1, 2, 3], \"key2\": \"abc\"}, path)\n...     data = JsonLoader().load(path)\n...     data\n...\n{'key1': [1, 2, 3], 'key2': 'abc'}\n</code></pre>"},{"location":"refs/io/#iden.io.JsonSaver","title":"iden.io.JsonSaver","text":"<p>             Bases: <code>BaseFileSaver[Any]</code></p> <p>Implement a file saver to save data with a JSON file.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import tempfile\n&gt;&gt;&gt; from pathlib import Path\n&gt;&gt;&gt; from iden.io import JsonSaver, JsonLoader\n&gt;&gt;&gt; with tempfile.TemporaryDirectory() as tmpdir:\n...     path = Path(tmpdir).joinpath(\"data.json\")\n...     JsonSaver().save({\"key1\": [1, 2, 3], \"key2\": \"abc\"}, path)\n...     data = JsonLoader().load(path)\n...     data\n...\n{'key1': [1, 2, 3], 'key2': 'abc'}\n</code></pre>"},{"location":"refs/io/#iden.io.PickleLoader","title":"iden.io.PickleLoader","text":"<p>             Bases: <code>BaseLoader[Any]</code></p> <p>Implement a data loader to load data in a pickle file.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import tempfile\n&gt;&gt;&gt; from pathlib import Path\n&gt;&gt;&gt; from iden.io import save_pickle, PickleLoader\n&gt;&gt;&gt; with tempfile.TemporaryDirectory() as tmpdir:\n...     path = Path(tmpdir).joinpath(\"data.pkl\")\n...     save_pickle({\"key1\": [1, 2, 3], \"key2\": \"abc\"}, path)\n...     data = PickleLoader().load(path)\n...     data\n...\n{'key1': [1, 2, 3], 'key2': 'abc'}\n</code></pre>"},{"location":"refs/io/#iden.io.PickleSaver","title":"iden.io.PickleSaver","text":"<p>             Bases: <code>BaseFileSaver[Any]</code></p> <p>Implement a file saver to save data with a pickle file.</p> <p>Parameters:</p> Name Type Description Default <code>protocol</code> <code>int</code> <p>The pickle protocol. By default, it uses the highest protocol available.</p> <code>HIGHEST_PROTOCOL</code> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import tempfile\n&gt;&gt;&gt; from pathlib import Path\n&gt;&gt;&gt; from iden.io import PickleSaver, PickleLoader\n&gt;&gt;&gt; with tempfile.TemporaryDirectory() as tmpdir:\n...     path = Path(tmpdir).joinpath(\"data.pkl\")\n...     PickleSaver().save({\"key1\": [1, 2, 3], \"key2\": \"abc\"}, path)\n...     data = PickleLoader().load(path)\n...     data\n...\n{'key1': [1, 2, 3], 'key2': 'abc'}\n</code></pre>"},{"location":"refs/io/#iden.io.TextLoader","title":"iden.io.TextLoader","text":"<p>             Bases: <code>BaseLoader[Any]</code></p> <p>Implement a data loader to load data in a text file.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import tempfile\n&gt;&gt;&gt; from pathlib import Path\n&gt;&gt;&gt; from iden.io import save_text, TextLoader\n&gt;&gt;&gt; with tempfile.TemporaryDirectory() as tmpdir:\n...     path = Path(tmpdir).joinpath(\"data.txt\")\n...     save_text(\"hello\", path)\n...     data = TextLoader().load(path)\n...     data\n...\n'hello'\n</code></pre>"},{"location":"refs/io/#iden.io.TextSaver","title":"iden.io.TextSaver","text":"<p>             Bases: <code>BaseFileSaver[Any]</code></p> <p>Implement a file saver to save data with a text file.</p> Note <p>If the data to save is not a string, it is converted to     a string before to be saved by using <code>str</code>.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import tempfile\n&gt;&gt;&gt; from pathlib import Path\n&gt;&gt;&gt; from iden.io import TextSaver, TextLoader\n&gt;&gt;&gt; with tempfile.TemporaryDirectory() as tmpdir:\n...     path = Path(tmpdir).joinpath(\"data.txt\")\n...     TextSaver().save(\"hello\", path)\n...     data = TextLoader().load(path)\n...     data\n...\n'hello'\n</code></pre>"},{"location":"refs/io/#iden.io.TorchLoader","title":"iden.io.TorchLoader","text":"<p>             Bases: <code>BaseLoader[Any]</code></p> <p>Implement a data loader to load data in a JSON file.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import tempfile\n&gt;&gt;&gt; from pathlib import Path\n&gt;&gt;&gt; from iden.io import save_torch, TorchLoader\n&gt;&gt;&gt; with tempfile.TemporaryDirectory() as tmpdir:\n...     path = Path(tmpdir).joinpath(\"data.pt\")\n...     save_torch({\"key1\": [1, 2, 3], \"key2\": \"abc\"}, path)\n...     data = TorchLoader().load(path)\n...     data\n...\n{'key1': [1, 2, 3], 'key2': 'abc'}\n</code></pre>"},{"location":"refs/io/#iden.io.TorchSaver","title":"iden.io.TorchSaver","text":"<p>             Bases: <code>BaseFileSaver[Any]</code></p> <p>Implement a file saver to save data with a JSON file.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import tempfile\n&gt;&gt;&gt; from pathlib import Path\n&gt;&gt;&gt; from iden.io import TorchSaver, TorchLoader\n&gt;&gt;&gt; with tempfile.TemporaryDirectory() as tmpdir:\n...     path = Path(tmpdir).joinpath(\"data.pt\")\n...     TorchSaver().save({\"key1\": [1, 2, 3], \"key2\": \"abc\"}, path)\n...     data = TorchLoader().load(path)\n...     data\n...\n{'key1': [1, 2, 3], 'key2': 'abc'}\n</code></pre>"},{"location":"refs/io/#iden.io.YamlLoader","title":"iden.io.YamlLoader","text":"<p>             Bases: <code>BaseLoader[Any]</code></p> <p>Implement a data loader to load data in a YAML file.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import tempfile\n&gt;&gt;&gt; from pathlib import Path\n&gt;&gt;&gt; from iden.io import save_yaml, YamlLoader\n&gt;&gt;&gt; with tempfile.TemporaryDirectory() as tmpdir:\n...     path = Path(tmpdir).joinpath(\"data.yaml\")\n...     save_yaml({\"key1\": [1, 2, 3], \"key2\": \"abc\"}, path)\n...     data = YamlLoader().load(path)\n...     data\n...\n{'key1': [1, 2, 3], 'key2': 'abc'}\n</code></pre>"},{"location":"refs/io/#iden.io.YamlSaver","title":"iden.io.YamlSaver","text":"<p>             Bases: <code>BaseFileSaver[Any]</code></p> <p>Implement a file saver to save data with a YAML file.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import tempfile\n&gt;&gt;&gt; from pathlib import Path\n&gt;&gt;&gt; from iden.io import YamlSaver, YamlLoader\n&gt;&gt;&gt; with tempfile.TemporaryDirectory() as tmpdir:\n...     path = Path(tmpdir).joinpath(\"data.yaml\")\n...     YamlSaver().save({\"key1\": [1, 2, 3], \"key2\": \"abc\"}, path)\n...     data = YamlLoader().load(path)\n...     data\n...\n{'key1': [1, 2, 3], 'key2': 'abc'}\n</code></pre>"},{"location":"refs/io/#iden.io.is_loader_config","title":"iden.io.is_loader_config","text":"<pre><code>is_loader_config(config: dict) -&gt; bool\n</code></pre> <p>Indicate if the input configuration is a configuration for a <code>BaseLoader</code>.</p> <p>This function only checks if the value of the key  <code>_target_</code> is valid. It does not check the other values. If <code>_target_</code> indicates a function, the returned type hint is used to check the class.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>dict</code> <p>Specifies the configuration to check.</p> required <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if the input configuration is a configuration for a <code>BaseLoader</code> object.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from iden.io import is_loader_config\n&gt;&gt;&gt; is_loader_config({\"_target_\": \"iden.io.JsonLoader\"})\nTrue\n</code></pre>"},{"location":"refs/io/#iden.io.is_saver_config","title":"iden.io.is_saver_config","text":"<pre><code>is_saver_config(config: dict) -&gt; bool\n</code></pre> <p>Indicate if the input configuration is a configuration for a <code>BaseSaver</code>.</p> <p>This function only checks if the value of the key  <code>_target_</code> is valid. It does not check the other values. If <code>_target_</code> indicates a function, the returned type hint is used to check the class.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>dict</code> <p>Specifies the configuration to check.</p> required <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if the input configuration is a configuration for a <code>BaseSaver</code> object.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from iden.io import is_saver_config\n&gt;&gt;&gt; is_saver_config({\"_target_\": \"iden.io.JsonSaver\"})\nTrue\n</code></pre>"},{"location":"refs/io/#iden.io.load_json","title":"iden.io.load_json","text":"<pre><code>load_json(path: Path) -&gt; Any\n</code></pre> <p>Load the data from a given JSON file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>Path</code> <p>Specifies the path to the JSON file.</p> required <p>Returns:</p> Type Description <code>Any</code> <p>The data from the JSON file.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import tempfile\n&gt;&gt;&gt; from pathlib import Path\n&gt;&gt;&gt; from iden.io import save_json, load_json\n&gt;&gt;&gt; with tempfile.TemporaryDirectory() as tmpdir:\n...     path = Path(tmpdir).joinpath(\"data.json\")\n...     save_json({\"key1\": [1, 2, 3], \"key2\": \"abc\"}, path)\n...     data = load_json(path)\n...     data\n...\n{'key1': [1, 2, 3], 'key2': 'abc'}\n</code></pre>"},{"location":"refs/io/#iden.io.load_pickle","title":"iden.io.load_pickle","text":"<pre><code>load_pickle(path: Path) -&gt; Any\n</code></pre> <p>Load the data from a given pickle file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>Path</code> <p>Specifies the path to the pickle file.</p> required <p>Returns:</p> Type Description <code>Any</code> <p>The data from the pickle file.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import tempfile\n&gt;&gt;&gt; from pathlib import Path\n&gt;&gt;&gt; from iden.io import save_pickle, load_pickle\n&gt;&gt;&gt; with tempfile.TemporaryDirectory() as tmpdir:\n...     path = Path(tmpdir).joinpath(\"data.pkl\")\n...     save_pickle({\"key1\": [1, 2, 3], \"key2\": \"abc\"}, path)\n...     data = load_pickle(path)\n...     data\n...\n{'key1': [1, 2, 3], 'key2': 'abc'}\n</code></pre>"},{"location":"refs/io/#iden.io.load_text","title":"iden.io.load_text","text":"<pre><code>load_text(path: Path) -&gt; str\n</code></pre> <p>Load the data from a given text file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>Path</code> <p>Specifies the path where to the text file.</p> required <p>Returns:</p> Type Description <code>str</code> <p>The data from the text file.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import tempfile\n&gt;&gt;&gt; from pathlib import Path\n&gt;&gt;&gt; from iden.io import save_text, load_text\n&gt;&gt;&gt; with tempfile.TemporaryDirectory() as tmpdir:\n...     path = Path(tmpdir).joinpath(\"data.txt\")\n...     save_text(\"hello\", path)\n...     data = load_text(path)\n...     data\n...\n'hello'\n</code></pre>"},{"location":"refs/io/#iden.io.load_torch","title":"iden.io.load_torch","text":"<pre><code>load_torch(path: Path) -&gt; Any\n</code></pre> <p>Load the data from a given JSON file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>Path</code> <p>Specifies the path to the JSON file.</p> required <p>Returns:</p> Type Description <code>Any</code> <p>The data from the JSON file.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import tempfile\n&gt;&gt;&gt; from pathlib import Path\n&gt;&gt;&gt; from iden.io import save_torch, load_torch\n&gt;&gt;&gt; with tempfile.TemporaryDirectory() as tmpdir:\n...     path = Path(tmpdir).joinpath(\"data.pt\")\n...     save_torch({\"key1\": [1, 2, 3], \"key2\": \"abc\"}, path)\n...     data = load_torch(path)\n...     data\n...\n{'key1': [1, 2, 3], 'key2': 'abc'}\n</code></pre>"},{"location":"refs/io/#iden.io.load_yaml","title":"iden.io.load_yaml","text":"<pre><code>load_yaml(path: Path) -&gt; Any\n</code></pre> <p>Load the data from a given YAML file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>Path</code> <p>Specifies the path to the YAML file.</p> required <p>Returns:</p> Type Description <code>Any</code> <p>The data from the YAML file.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import tempfile\n&gt;&gt;&gt; from pathlib import Path\n&gt;&gt;&gt; from iden.io import load_yaml, save_yaml\n&gt;&gt;&gt; with tempfile.TemporaryDirectory() as tmpdir:\n...     path = Path(tmpdir).joinpath(\"data.yaml\")\n...     save_yaml({\"key1\": [1, 2, 3], \"key2\": \"abc\"}, path)\n...     data = load_yaml(path)\n...     data\n...\n{'key1': [1, 2, 3], 'key2': 'abc'}\n</code></pre>"},{"location":"refs/io/#iden.io.save_json","title":"iden.io.save_json","text":"<pre><code>save_json(\n    to_save: Any, path: Path, *, exist_ok: bool = False\n) -&gt; None\n</code></pre> <p>Save the given data in a JSON file.</p> <p>Parameters:</p> Name Type Description Default <code>to_save</code> <code>Any</code> <p>Specifies the data to write in a JSON file.</p> required <code>path</code> <code>Path</code> <p>Specifies the path where to write the JSON file.</p> required <code>exist_ok</code> <code>bool</code> <p>If <code>exist_ok</code> is <code>False</code> (the default), <code>FileExistsError</code> is raised if the target file already exists. If <code>exist_ok</code> is <code>True</code>, <code>FileExistsError</code> will not be raised unless the given path already exists in the file system and is not a file.</p> <code>False</code> <p>Raises:</p> Type Description <code>FileExistsError</code> <p>if the file already exists.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import tempfile\n&gt;&gt;&gt; from pathlib import Path\n&gt;&gt;&gt; from iden.io import save_json, load_json\n&gt;&gt;&gt; with tempfile.TemporaryDirectory() as tmpdir:\n...     path = Path(tmpdir).joinpath(\"data.json\")\n...     save_json({\"key1\": [1, 2, 3], \"key2\": \"abc\"}, path)\n...     data = load_json(path)\n...     data\n...\n{'key1': [1, 2, 3], 'key2': 'abc'}\n</code></pre>"},{"location":"refs/io/#iden.io.save_pickle","title":"iden.io.save_pickle","text":"<pre><code>save_pickle(\n    to_save: Any,\n    path: Path,\n    *,\n    exist_ok: bool = False,\n    protocol: int = pickle.HIGHEST_PROTOCOL\n) -&gt; None\n</code></pre> <p>Save the given data in a pickle file.</p> <p>Parameters:</p> Name Type Description Default <code>to_save</code> <code>Any</code> <p>Specifies the data to write in a pickle file.</p> required <code>path</code> <code>Path</code> <p>Specifies the path where to write the pickle file.</p> required <code>exist_ok</code> <code>bool</code> <p>If <code>exist_ok</code> is <code>False</code> (the default), <code>FileExistsError</code> is raised if the target file already exists. If <code>exist_ok</code> is <code>True</code>, <code>FileExistsError</code> will not be raised unless the given path already exists in the file system and is not a file.</p> <code>False</code> <code>protocol</code> <code>int</code> <p>Specifies the pickle protocol. By default, it uses the highest protocol available.</p> <code>HIGHEST_PROTOCOL</code> <p>Raises:</p> Type Description <code>FileExistsError</code> <p>if the file already exists.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import tempfile\n&gt;&gt;&gt; from pathlib import Path\n&gt;&gt;&gt; from iden.io import save_pickle, load_pickle\n&gt;&gt;&gt; with tempfile.TemporaryDirectory() as tmpdir:\n...     path = Path(tmpdir).joinpath(\"data.pkl\")\n...     save_pickle({\"key1\": [1, 2, 3], \"key2\": \"abc\"}, path)\n...     data = load_pickle(path)\n...     data\n...\n{'key1': [1, 2, 3], 'key2': 'abc'}\n</code></pre>"},{"location":"refs/io/#iden.io.save_text","title":"iden.io.save_text","text":"<pre><code>save_text(\n    to_save: Any, path: Path, *, exist_ok: bool = False\n) -&gt; None\n</code></pre> <p>Save the given data in a text file.</p> <p>Parameters:</p> Name Type Description Default <code>to_save</code> <code>Any</code> <p>Specifies the data to write in a text file.</p> required <code>path</code> <code>Path</code> <p>Specifies the path where to write the text file.</p> required <code>exist_ok</code> <code>bool</code> <p>If <code>exist_ok</code> is <code>False</code> (the default), <code>FileExistsError</code> is raised if the target file already exists. If <code>exist_ok</code> is <code>True</code>, <code>FileExistsError</code> will not be raised unless the given path already exists in the file system and is not a file.</p> <code>False</code> <p>Raises:</p> Type Description <code>FileExistsError</code> <p>if the file already exists.</p> Note <p>If the data to save is not a string, it is converted to     a string before to be saved by using <code>str</code>.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import tempfile\n&gt;&gt;&gt; from pathlib import Path\n&gt;&gt;&gt; from iden.io import save_text, load_text\n&gt;&gt;&gt; with tempfile.TemporaryDirectory() as tmpdir:\n...     path = Path(tmpdir).joinpath(\"data.txt\")\n...     save_text(\"hello\", path)\n...     data = load_text(path)\n...     data\n...\n'hello'\n</code></pre>"},{"location":"refs/io/#iden.io.save_torch","title":"iden.io.save_torch","text":"<pre><code>save_torch(\n    to_save: Any, path: Path, *, exist_ok: bool = False\n) -&gt; None\n</code></pre> <p>Save the given data in a JSON file.</p> <p>Parameters:</p> Name Type Description Default <code>to_save</code> <code>Any</code> <p>Specifies the data to write in a JSON file.</p> required <code>path</code> <code>Path</code> <p>Specifies the path where to write the JSON file.</p> required <code>exist_ok</code> <code>bool</code> <p>If <code>exist_ok</code> is <code>False</code> (the default), <code>FileExistsError</code> is raised if the target file already exists. If <code>exist_ok</code> is <code>True</code>, <code>FileExistsError</code> will not be raised unless the given path already exists in the file system and is not a file.</p> <code>False</code> <p>Raises:</p> Type Description <code>FileExistsError</code> <p>if the file already exists.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import tempfile\n&gt;&gt;&gt; from pathlib import Path\n&gt;&gt;&gt; from iden.io import save_torch, load_torch\n&gt;&gt;&gt; with tempfile.TemporaryDirectory() as tmpdir:\n...     path = Path(tmpdir).joinpath(\"data.pt\")\n...     save_torch({\"key1\": [1, 2, 3], \"key2\": \"abc\"}, path)\n...     data = load_torch(path)\n...     data\n...\n{'key1': [1, 2, 3], 'key2': 'abc'}\n</code></pre>"},{"location":"refs/io/#iden.io.save_yaml","title":"iden.io.save_yaml","text":"<pre><code>save_yaml(\n    to_save: Any, path: Path, *, exist_ok: bool = False\n) -&gt; None\n</code></pre> <p>Save the given data in a YAML file.</p> <p>Parameters:</p> Name Type Description Default <code>to_save</code> <code>Any</code> <p>Specifies the data to write in a YAML file.</p> required <code>path</code> <code>Path</code> <p>Specifies the path where to write the YAML file.</p> required <code>exist_ok</code> <code>bool</code> <p>If <code>exist_ok</code> is <code>False</code> (the default), <code>FileExistsError</code> is raised if the target file already exists. If <code>exist_ok</code> is <code>True</code>, <code>FileExistsError</code> will not be raised unless the given path already exists in the file system and is not a file.</p> <code>False</code> <p>Raises:</p> Type Description <code>FileExistsError</code> <p>if the file already exists.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import tempfile\n&gt;&gt;&gt; from pathlib import Path\n&gt;&gt;&gt; from iden.io import load_yaml, save_yaml\n&gt;&gt;&gt; with tempfile.TemporaryDirectory() as tmpdir:\n...     path = Path(tmpdir).joinpath(\"data.yaml\")\n...     save_yaml({\"key1\": [1, 2, 3], \"key2\": \"abc\"}, path)\n...     data = load_yaml(path)\n...     data\n...\n{'key1': [1, 2, 3], 'key2': 'abc'}\n</code></pre>"},{"location":"refs/io/#iden.io.setup_loader","title":"iden.io.setup_loader","text":"<pre><code>setup_loader(loader: BaseLoader | dict) -&gt; BaseLoader\n</code></pre> <p>Set up a data loader.</p> <p>The data loader is instantiated from its configuration by using the <code>BaseLoader</code> factory function.</p> <p>Parameters:</p> Name Type Description Default <code>loader</code> <code>BaseLoader | dict</code> <p>Specifies the data loader or its configuration.</p> required <p>Returns:</p> Type Description <code>BaseLoader</code> <p>The instantiated data loader.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from iden.io import setup_loader\n&gt;&gt;&gt; loader = setup_loader({\"_target_\": \"iden.io.JsonLoader\"})\n&gt;&gt;&gt; loader\nJsonLoader()\n</code></pre>"},{"location":"refs/io/#iden.io.setup_saver","title":"iden.io.setup_saver","text":"<pre><code>setup_saver(saver: BaseSaver | dict) -&gt; BaseSaver\n</code></pre> <p>Set up a data saver.</p> <p>The data saver is instantiated from its configuration by using the <code>BaseSaver</code> factory function.</p> <p>Parameters:</p> Name Type Description Default <code>saver</code> <code>BaseSaver | dict</code> <p>Specifies the data saver or its configuration.</p> required <p>Returns:</p> Type Description <code>BaseSaver</code> <p>The instantiated data saver.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from iden.io import setup_saver\n&gt;&gt;&gt; saver = setup_saver({\"_target_\": \"iden.io.JsonSaver\"})\n&gt;&gt;&gt; saver\nJsonSaver()\n</code></pre>"},{"location":"refs/shard/","title":"Shard","text":""},{"location":"refs/shard/#iden.shard","title":"iden.shard","text":"<p>Contain shard implementations.</p>"},{"location":"refs/shard/#iden.shard.BaseShard","title":"iden.shard.BaseShard","text":"<p>             Bases: <code>Generic[T]</code>, <code>ABC</code></p> <p>Define the base class to implement a shard.</p>"},{"location":"refs/shard/#iden.shard.BaseShard.clear","title":"iden.shard.BaseShard.clear  <code>abstractmethod</code>","text":"<pre><code>clear() -&gt; None\n</code></pre> <p>Clear the current shard i.e. remove from memory the data if possible.</p>"},{"location":"refs/shard/#iden.shard.BaseShard.equal","title":"iden.shard.BaseShard.equal  <code>abstractmethod</code>","text":"<pre><code>equal(other: Any, equal_nan: bool = False) -&gt; bool\n</code></pre> <p>Indicate if two shards are equal or not.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>Any</code> <p>The object to compare with.</p> required <code>equal_nan</code> <code>bool</code> <p>If <code>True</code>, then two <code>NaN</code>s will be considered equal.</p> <code>False</code> <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if the two shards are equal, otherwise <code>False</code>.</p>"},{"location":"refs/shard/#iden.shard.BaseShard.get_data","title":"iden.shard.BaseShard.get_data  <code>abstractmethod</code>","text":"<pre><code>get_data() -&gt; T\n</code></pre> <p>Get the data in the shard.</p> <p>Returns:</p> Type Description <code>T</code> <p>The data in the shard.</p>"},{"location":"refs/shard/#iden.shard.BaseShard.get_uri","title":"iden.shard.BaseShard.get_uri  <code>abstractmethod</code>","text":"<pre><code>get_uri() -&gt; str | None\n</code></pre> <p>Get the Uniform Resource Identifier (URI) of the shard.</p> <p>Returns:</p> Type Description <code>str | None</code> <p>The Uniform Resource Identifier (URI).</p>"},{"location":"refs/shard/#iden.shard.BaseShard.is_initialized","title":"iden.shard.BaseShard.is_initialized  <code>abstractmethod</code>","text":"<pre><code>is_initialized() -&gt; bool\n</code></pre> <p>Indicate if the shard has data in-memory or not.</p> <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if the shard has data in-memory otherwise <code>False</code>.</p>"},{"location":"refs/shard/#iden.shard.FileShard","title":"iden.shard.FileShard","text":"<p>             Bases: <code>BaseShard[T]</code></p> <p>Implement a generic shard where the data are stored in a single file.</p> <p>Parameters:</p> Name Type Description Default <code>uri</code> <code>str</code> <p>The shard's URI.</p> required <code>path</code> <code>Path | str</code> <p>Specifies the path to the pickle file.</p> required <code>loader</code> <code>BaseLoader[T] | dict | None</code> <p>The data loader or its configuration.</p> <code>None</code> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import tempfile\n&gt;&gt;&gt; from pathlib import Path\n&gt;&gt;&gt; from iden.shard import FileShard\n&gt;&gt;&gt; from iden.io import save_json, JsonLoader\n&gt;&gt;&gt; with tempfile.TemporaryDirectory() as tmpdir:\n...     file = Path(tmpdir).joinpath(\"data.json\")\n...     save_json([1, 2, 3], file)\n...     uri = Path(tmpdir).joinpath(\"my_uri\").as_uri()\n...     shard = FileShard(uri=uri, path=file, loader=JsonLoader())\n...     shard.get_data()\n...\n[1, 2, 3]\n</code></pre>"},{"location":"refs/shard/#iden.shard.FileShard.path","title":"iden.shard.FileShard.path  <code>property</code>","text":"<pre><code>path: Path\n</code></pre> <p>The path to the file with data.</p>"},{"location":"refs/shard/#iden.shard.FileShard.from_uri","title":"iden.shard.FileShard.from_uri  <code>classmethod</code>","text":"<pre><code>from_uri(uri: str) -&gt; FileShard\n</code></pre> <p>Instantiate a shard from its URI.</p> <p>Parameters:</p> Name Type Description Default <code>uri</code> <code>str</code> <p>The URI.</p> required <p>Returns:</p> Type Description <code>FileShard</code> <p>The instantiated shard.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import tempfile\n&gt;&gt;&gt; from pathlib import Path\n&gt;&gt;&gt; from iden.shard import FileShard, create_json_shard\n&gt;&gt;&gt; with tempfile.TemporaryDirectory() as tmpdir:\n...     uri = Path(tmpdir).joinpath(\"my_uri\").as_uri()\n...     _ = create_json_shard([1, 2, 3], uri=uri)\n...     shard = FileShard.from_uri(uri)\n...     shard\n...\nFileShard(uri=file:///.../my_uri)\n</code></pre>"},{"location":"refs/shard/#iden.shard.FileShard.generate_uri_config","title":"iden.shard.FileShard.generate_uri_config  <code>classmethod</code>","text":"<pre><code>generate_uri_config(path: Path) -&gt; dict\n</code></pre> <p>Generate the minimal config that is used to load the shard from its URI.</p> <p>The config must be compatible with the JSON format.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>Path</code> <p>The path to the json file.</p> required <p>Returns:</p> Type Description <code>dict</code> <p>The minimal config to load the shard from its URI.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import tempfile\n&gt;&gt;&gt; from pathlib import Path\n&gt;&gt;&gt; from iden.shard import FileShard\n&gt;&gt;&gt; with tempfile.TemporaryDirectory() as tmpdir:\n...     file = Path(tmpdir).joinpath(\"data.json\")\n...     FileShard.generate_uri_config(file)\n...\n{'kwargs': {'path': '.../data.json'},\n 'loader': {'_target_': 'iden.shard.loader.FileShardLoader'}}\n</code></pre>"},{"location":"refs/shard/#iden.shard.InMemoryShard","title":"iden.shard.InMemoryShard","text":"<p>             Bases: <code>BaseShard[Any]</code></p> <p>Implement an in-memory shard.</p> <p>This shard does not have valid URI as the data are stored in-memory.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from iden.shard import InMemoryShard\n&gt;&gt;&gt; shard = InMemoryShard([1, 2, 3])\n&gt;&gt;&gt; shard.get_data()\n[1, 2, 3]\n</code></pre>"},{"location":"refs/shard/#iden.shard.InMemoryShard.clear","title":"iden.shard.InMemoryShard.clear","text":"<pre><code>clear() -&gt; None\n</code></pre> <p>Do nothing because it is an in-memory shard.</p>"},{"location":"refs/shard/#iden.shard.JsonShard","title":"iden.shard.JsonShard","text":"<p>             Bases: <code>FileShard[Any]</code></p> <p>Implement a JSON shard.</p> <p>The data are stored in a JSON file.</p> <p>Parameters:</p> Name Type Description Default <code>uri</code> <code>str</code> <p>The shard's URI.</p> required <code>path</code> <code>Path | str</code> <p>Specifies the path to the JSON file.</p> required <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import tempfile\n&gt;&gt;&gt; from pathlib import Path\n&gt;&gt;&gt; from iden.shard import JsonShard\n&gt;&gt;&gt; from iden.io import save_json\n&gt;&gt;&gt; with tempfile.TemporaryDirectory() as tmpdir:\n...     file = Path(tmpdir).joinpath(\"data.json\")\n...     save_json([1, 2, 3], file)\n...     shard = JsonShard(uri=\"file:///data/1234456789\", path=file)\n...     shard.get_data()\n...\n[1, 2, 3]\n</code></pre>"},{"location":"refs/shard/#iden.shard.JsonShard.generate_uri_config","title":"iden.shard.JsonShard.generate_uri_config  <code>classmethod</code>","text":"<pre><code>generate_uri_config(path: Path) -&gt; dict\n</code></pre> <p>Generate the minimal config that is used to load the shard from its URI.</p> <p>The config must be compatible with the JSON format.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>Path</code> <p>The path to the json file.</p> required <p>Returns:</p> Type Description <code>dict</code> <p>The minimal config to load the shard from its URI.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import tempfile\n&gt;&gt;&gt; from pathlib import Path\n&gt;&gt;&gt; from iden.shard import JsonShard\n&gt;&gt;&gt; with tempfile.TemporaryDirectory() as tmpdir:\n...     file = Path(tmpdir).joinpath(\"data.json\")\n...     JsonShard.generate_uri_config(file)\n...\n{'kwargs': {'path': '.../data.json'},\n 'loader': {'_target_': 'iden.shard.loader.JsonShardLoader'}}\n</code></pre>"},{"location":"refs/shard/#iden.shard.PickleShard","title":"iden.shard.PickleShard","text":"<p>             Bases: <code>FileShard[Any]</code></p> <p>Implement a pickle shard.</p> <p>The data are stored in a pickle file.</p> <p>Parameters:</p> Name Type Description Default <code>uri</code> <code>str</code> <p>The shard's URI.</p> required <code>path</code> <code>Path | str</code> <p>Specifies the path to the pickle file.</p> required <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import tempfile\n&gt;&gt;&gt; from pathlib import Path\n&gt;&gt;&gt; from iden.shard import PickleShard\n&gt;&gt;&gt; from iden.io import save_pickle\n&gt;&gt;&gt; with tempfile.TemporaryDirectory() as tmpdir:\n...     file = Path(tmpdir).joinpath(\"data.pkl\")\n...     save_pickle([1, 2, 3], file)\n...     shard = PickleShard(uri=\"file:///data/1234456789\", path=file)\n...     shard.get_data()\n...\n[1, 2, 3]\n</code></pre>"},{"location":"refs/shard/#iden.shard.PickleShard.generate_uri_config","title":"iden.shard.PickleShard.generate_uri_config  <code>classmethod</code>","text":"<pre><code>generate_uri_config(path: Path) -&gt; dict\n</code></pre> <p>Generate the minimal config that is used to load the shard from its URI.</p> <p>The config must be compatible with the JSON format.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>Path</code> <p>The path to the pickle file.</p> required <p>Returns:</p> Type Description <code>dict</code> <p>The minimal config to load the shard from its URI.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import tempfile\n&gt;&gt;&gt; from pathlib import Path\n&gt;&gt;&gt; from iden.shard import PickleShard\n&gt;&gt;&gt; with tempfile.TemporaryDirectory() as tmpdir:\n...     file = Path(tmpdir).joinpath(\"data.pkl\")\n...     PickleShard.generate_uri_config(file)\n...\n{'kwargs': {'path': '.../data.pkl'},\n 'loader': {'_target_': 'iden.shard.loader.PickleShardLoader'}}\n</code></pre>"},{"location":"refs/shard/#iden.shard.ShardDict","title":"iden.shard.ShardDict","text":"<p>             Bases: <code>BaseShard</code></p> <p>Implement a data structure to manage a dictionary of shards.</p> <p>Parameters:</p> Name Type Description Default <code>uri</code> <code>str</code> <p>The shard's URI.</p> required <code>shards</code> <code>dict[str, BaseShard]</code> <p>The dictionary of shards.</p> required <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import tempfile\n&gt;&gt;&gt; from pathlib import Path\n&gt;&gt;&gt; from iden.dataset import VanillaDataset\n&gt;&gt;&gt; from iden.shard import create_json_shard, ShardDict\n&gt;&gt;&gt; with tempfile.TemporaryDirectory() as tmpdir:\n...     shards = {\n...         \"train\": create_json_shard(\n...             [1, 2, 3], uri=Path(tmpdir).joinpath(\"shard/uri1\").as_uri()\n...         ),\n...         \"val\": create_json_shard(\n...             [4, 5, 6, 7], uri=Path(tmpdir).joinpath(\"shard/uri2\").as_uri()\n...         ),\n...     }\n...     sd = ShardDict(uri=Path(tmpdir).joinpath(\"uri\").as_uri(), shards=shards)\n...     sd\n...\nShardDict(\n  (uri): file:///.../uri\n  (shards):\n    (train): JsonShard(uri=file:///.../shard/uri1)\n    (val): JsonShard(uri=file:///.../shard/uri2)\n)\n</code></pre>"},{"location":"refs/shard/#iden.shard.ShardDict.from_uri","title":"iden.shard.ShardDict.from_uri  <code>classmethod</code>","text":"<pre><code>from_uri(uri: str) -&gt; ShardDict\n</code></pre> <p>Instantiate a shard from its URI.</p> <p>Parameters:</p> Name Type Description Default <code>uri</code> <code>str</code> <p>The URI.</p> required <p>Returns:</p> Type Description <code>ShardDict</code> <p>The instantiated shard.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import tempfile\n&gt;&gt;&gt; from pathlib import Path\n&gt;&gt;&gt; from iden.shard import ShardDict, create_json_shard, create_shard_dict\n&gt;&gt;&gt; with tempfile.TemporaryDirectory() as tmpdir:\n...     shards = {\n...         \"train\": create_json_shard(\n...             [1, 2, 3], uri=Path(tmpdir).joinpath(\"shard/uri1\").as_uri()\n...         ),\n...         \"val\": create_json_shard(\n...             [4, 5, 6, 7], uri=Path(tmpdir).joinpath(\"shard/uri2\").as_uri()\n...         ),\n...     }\n...     uri = Path(tmpdir).joinpath(\"uri\").as_uri()\n...     _ = create_shard_dict(shards, uri=uri)\n...     shard = ShardDict.from_uri(uri)\n...     shard\n...\nShardDict(\n  (uri): file:///.../uri\n  (shards):\n    (train): JsonShard(uri=file:///.../shard/uri1)\n    (val): JsonShard(uri=file:///.../shard/uri2)\n)\n</code></pre>"},{"location":"refs/shard/#iden.shard.ShardDict.generate_uri_config","title":"iden.shard.ShardDict.generate_uri_config  <code>classmethod</code>","text":"<pre><code>generate_uri_config(shards: dict[str, BaseShard]) -&gt; dict\n</code></pre> <p>Generate the minimal config that is used to load the shard from its URI.</p> <p>The config must be compatible with the JSON format.</p> <p>Parameters:</p> Name Type Description Default <code>shards</code> <code>dict[str, BaseShard]</code> <p>The shards.</p> required <p>Returns:</p> Type Description <code>dict</code> <p>The minimal config to load the shard from its URI.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import tempfile\n&gt;&gt;&gt; from pathlib import Path\n&gt;&gt;&gt; from iden.shard import ShardDict, create_json_shard\n&gt;&gt;&gt; with tempfile.TemporaryDirectory() as tmpdir:\n...     shards = {\n...         \"train\": create_json_shard(\n...             [1, 2, 3], uri=Path(tmpdir).joinpath(\"shard/uri1\").as_uri()\n...         ),\n...         \"val\": create_json_shard(\n...             [4, 5, 6, 7], uri=Path(tmpdir).joinpath(\"shard/uri2\").as_uri()\n...         ),\n...     }\n...     ShardDict.generate_uri_config(shards)\n...\n{'shards': {'train': 'file:///.../shard/uri1', 'val': 'file:///.../shard/uri2'},\n 'loader': {'_target_': 'iden.shard.loader.ShardDictLoader'}}\n</code></pre>"},{"location":"refs/shard/#iden.shard.ShardDict.get_shard","title":"iden.shard.ShardDict.get_shard","text":"<pre><code>get_shard(shard_id: str) -&gt; Any\n</code></pre> <p>Get a shard.</p> <p>Parameters:</p> Name Type Description Default <code>shard_id</code> <code>str</code> <p>The shard ID.</p> required <p>Returns:</p> Type Description <code>Any</code> <p>The shard.</p> <p>Raises:</p> Type Description <code>ShardNotFoundError</code> <p>if the shard does not exist.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import tempfile\n&gt;&gt;&gt; from pathlib import Path\n&gt;&gt;&gt; from iden.shard import create_json_shard, ShardDict\n&gt;&gt;&gt; with tempfile.TemporaryDirectory() as tmpdir:\n...     shards = {\n...         \"train\": create_json_shard(\n...             [1, 2, 3], uri=Path(tmpdir).joinpath(\"shard/uri1\").as_uri()\n...         ),\n...         \"val\": create_json_shard(\n...             [4, 5, 6, 7], uri=Path(tmpdir).joinpath(\"shard/uri2\").as_uri()\n...         ),\n...     }\n...     sd = ShardDict(uri=Path(tmpdir).joinpath(\"main_uri\").as_uri(), shards=shards)\n...     sd.get_shard(\"train\")\n...\nJsonShard(uri=file:///.../uri1)\n</code></pre>"},{"location":"refs/shard/#iden.shard.ShardDict.get_shard_ids","title":"iden.shard.ShardDict.get_shard_ids","text":"<pre><code>get_shard_ids() -&gt; set[str]\n</code></pre> <p>Get the shard IDs.</p> <p>Returns:</p> Type Description <code>set[str]</code> <p>The shard IDs.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import tempfile\n&gt;&gt;&gt; from pathlib import Path\n&gt;&gt;&gt; from iden.shard import create_json_shard, ShardDict\n&gt;&gt;&gt; with tempfile.TemporaryDirectory() as tmpdir:\n...     shards = {\n...         \"train\": create_json_shard(\n...             [1, 2, 3], uri=Path(tmpdir).joinpath(\"shard/uri1\").as_uri()\n...         ),\n...         \"val\": create_json_shard(\n...             [4, 5, 6, 7], uri=Path(tmpdir).joinpath(\"shard/uri2\").as_uri()\n...         ),\n...     }\n...     sd = ShardDict(uri=Path(tmpdir).joinpath(\"main_uri\").as_uri(), shards=shards)\n...     sorted(sd.get_shard_ids())\n...\n['train', 'val']\n</code></pre>"},{"location":"refs/shard/#iden.shard.ShardDict.has_shard","title":"iden.shard.ShardDict.has_shard","text":"<pre><code>has_shard(shard_id: str) -&gt; bool\n</code></pre> <p>Indicate if the shard exists or not.</p> <p>Parameters:</p> Name Type Description Default <code>shard_id</code> <code>str</code> <p>The shard ID.</p> required <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if the shard exists, otherwise <code>False</code></p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import tempfile\n&gt;&gt;&gt; from pathlib import Path\n&gt;&gt;&gt; from iden.shard import create_json_shard, ShardDict\n&gt;&gt;&gt; with tempfile.TemporaryDirectory() as tmpdir:\n...     shards = {\n...         \"train\": create_json_shard(\n...             [1, 2, 3], uri=Path(tmpdir).joinpath(\"shard/uri1\").as_uri()\n...         ),\n...         \"val\": create_json_shard(\n...             [4, 5, 6, 7], uri=Path(tmpdir).joinpath(\"shard/uri2\").as_uri()\n...         ),\n...     }\n...     sd = ShardDict(uri=Path(tmpdir).joinpath(\"main_uri\").as_uri(), shards=shards)\n...     sd.has_shard(\"train\")\n...     sd.has_shard(\"test\")\n...\nTrue\nFalse\n</code></pre>"},{"location":"refs/shard/#iden.shard.ShardTuple","title":"iden.shard.ShardTuple","text":"<p>             Bases: <code>BaseShard[tuple[BaseShard, ...]]</code></p> <p>Implement a data structure to manage a tuple of shards.</p> <p>Parameters:</p> Name Type Description Default <code>uri</code> <code>str</code> <p>The shard's URI.</p> required <code>shards</code> <code>Iterable[BaseShard]</code> <p>The tuple of shards.</p> required <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import tempfile\n&gt;&gt;&gt; from pathlib import Path\n&gt;&gt;&gt; from iden.shard import create_json_shard\n&gt;&gt;&gt; from iden.shard import ShardTuple\n&gt;&gt;&gt; with tempfile.TemporaryDirectory() as tmpdir:\n...     shards = [\n...         create_json_shard([1, 2, 3], uri=Path(tmpdir).joinpath(\"shard/uri1\").as_uri()),\n...         create_json_shard(\n...             [4, 5, 6, 7], uri=Path(tmpdir).joinpath(\"shard/uri2\").as_uri()\n...         ),\n...     ]\n...     sl = ShardTuple(uri=Path(tmpdir).joinpath(\"uri\").as_uri(), shards=shards)\n...     sl\n...\nShardTuple(\n  (uri): file:///.../uri\n  (shards):\n    (0): JsonShard(uri=file:///.../shard/uri1)\n    (1): JsonShard(uri=file:///.../shard/uri2)\n)\n</code></pre>"},{"location":"refs/shard/#iden.shard.ShardTuple.from_uri","title":"iden.shard.ShardTuple.from_uri  <code>classmethod</code>","text":"<pre><code>from_uri(uri: str) -&gt; ShardTuple\n</code></pre> <p>Instantiate a shard from its URI.</p> <p>Parameters:</p> Name Type Description Default <code>uri</code> <code>str</code> <p>The URI.</p> required <p>Returns:</p> Type Description <code>ShardTuple</code> <p>The instantiated shard.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import tempfile\n&gt;&gt;&gt; from pathlib import Path\n&gt;&gt;&gt; from iden.shard import ShardTuple, create_json_shard\n&gt;&gt;&gt; with tempfile.TemporaryDirectory() as tmpdir:\n...     shards = [\n...         create_json_shard(\n...             [1, 2, 3], uri=Path(tmpdir).joinpath(\"shard/uri1\").as_uri()\n...         ),\n...         create_json_shard(\n...             [4, 5, 6, 7], uri=Path(tmpdir).joinpath(\"shard/uri2\").as_uri()\n...         ),\n...     ]\n...     uri = Path(tmpdir).joinpath(\"uri\").as_uri()\n...     create_shard_tuple(shards, uri=uri)\n...     shard = ShardTuple.from_uri(uri)\n...     shard\n...\nShardTuple(\n  (uri): file:///.../uri\n  (shards):\n    (0): JsonShard(uri=file:///.../shard/uri1)\n    (1): JsonShard(uri=file:///.../shard/uri2)\n)\n</code></pre>"},{"location":"refs/shard/#iden.shard.ShardTuple.generate_uri_config","title":"iden.shard.ShardTuple.generate_uri_config  <code>classmethod</code>","text":"<pre><code>generate_uri_config(shards: Iterable[BaseShard]) -&gt; dict\n</code></pre> <p>Generate the minimal config that is used to load the shard from its URI.</p> <p>The config must be compatible with the JSON format.</p> <p>Parameters:</p> Name Type Description Default <code>shards</code> <code>Iterable[BaseShard]</code> <p>The shards.</p> required <p>Returns:</p> Type Description <code>dict</code> <p>The minimal config to load the shard from its URI.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import tempfile\n&gt;&gt;&gt; from pathlib import Path\n&gt;&gt;&gt; from iden.shard import ShardTuple, create_json_shard\n&gt;&gt;&gt; with tempfile.TemporaryDirectory() as tmpdir:\n...     shards = [\n...         create_json_shard(\n...             [1, 2, 3], uri=Path(tmpdir).joinpath(\"shard/uri1\").as_uri()\n...         ),\n...         create_json_shard(\n...             [4, 5, 6, 7], uri=Path(tmpdir).joinpath(\"shard/uri2\").as_uri()\n...         ),\n...     ]\n...     ShardTuple.generate_uri_config(shards)\n...\n{'shards': ['file:///.../shard/uri1', 'file:///.../shard/uri2'],\n 'loader': {'_target_': 'iden.shard.loader.ShardTupleLoader'}}\n</code></pre>"},{"location":"refs/shard/#iden.shard.ShardTuple.get","title":"iden.shard.ShardTuple.get","text":"<pre><code>get(index: int) -&gt; BaseShard\n</code></pre> <p>Get a shard.</p> <p>Parameters:</p> Name Type Description Default <code>index</code> <code>int</code> <p>The shard index to get.</p> required <p>Returns:</p> Type Description <code>BaseShard</code> <p>The shard.</p> <p>Raises:</p> Type Description <code>IndexError</code> <p>if the index is outside  the tuple range.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import tempfile\n&gt;&gt;&gt; from pathlib import Path\n&gt;&gt;&gt; from iden.shard import create_json_shard\n&gt;&gt;&gt; from iden.shard import ShardTuple\n&gt;&gt;&gt; with tempfile.TemporaryDirectory() as tmpdir:\n...     shards = [\n...         create_json_shard(\n...             [1, 2, 3], uri=Path(tmpdir).joinpath(\"shard/uri1\").as_uri()\n...         ),\n...         create_json_shard(\n...             [4, 5, 6, 7], uri=Path(tmpdir).joinpath(\"shard/uri2\").as_uri()\n...         ),\n...     ]\n...     sl = ShardTuple(uri=Path(tmpdir).joinpath(\"main_uri\").as_uri(), shards=shards)\n...     sl.get(0)\n...\nJsonShard(uri=file:///.../uri1)\n</code></pre>"},{"location":"refs/shard/#iden.shard.ShardTuple.is_sorted_by_uri","title":"iden.shard.ShardTuple.is_sorted_by_uri","text":"<pre><code>is_sorted_by_uri() -&gt; bool\n</code></pre> <p>Indicate if the shards are sorted by ascending order of URIs or not.</p> <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if the shards are sorted by ascending order of URIs, otherwise <code>False</code>.</p>"},{"location":"refs/shard/#iden.shard.TorchSafetensorsShard","title":"iden.shard.TorchSafetensorsShard","text":"<p>             Bases: <code>FileShard[dict[str, Tensor]]</code></p> <p>Implement a safetensors shard for <code>torch.Tensor</code>s.</p> <p>The data are stored in a safetensors file.</p> <p>Parameters:</p> Name Type Description Default <code>uri</code> <code>str</code> <p>The shard's URI.</p> required <code>path</code> <code>Path | str</code> <p>Specifies the path to the safetensors file.</p> required <p>Raises:</p> Type Description <code>RuntimeError</code> <p>if <code>safetensors</code> or <code>torch</code> is not installed.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import tempfile\n&gt;&gt;&gt; from pathlib import Path\n&gt;&gt;&gt; from iden.shard import TorchSafetensorsShard\n&gt;&gt;&gt; from iden.io.safetensors import TorchSaver\n&gt;&gt;&gt; with tempfile.TemporaryDirectory() as tmpdir:\n...     file = Path(tmpdir).joinpath(\"data.safetensors\")\n...     TorchSaver().save({\"key1\": torch.ones(2, 3), \"key2\": torch.arange(5)}, file)\n...     shard = TorchSafetensorsShard(uri=\"file:///data/1234456789\", path=file)\n...     shard.get_data()\n...\n{'key1': tensor([[1., 1., 1.], [1., 1., 1.]]), 'key2': tensor([0, 1, 2, 3, 4])}\n</code></pre>"},{"location":"refs/shard/#iden.shard.TorchSafetensorsShard.generate_uri_config","title":"iden.shard.TorchSafetensorsShard.generate_uri_config  <code>classmethod</code>","text":"<pre><code>generate_uri_config(path: Path) -&gt; dict\n</code></pre> <p>Generate the minimal config that is used to load the shard from its URI.</p> <p>The config must be compatible with the JSON format.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>Path</code> <p>The path to the pickle file.</p> required <p>Returns:</p> Type Description <code>dict</code> <p>The minimal config to load the shard from its URI.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import tempfile\n&gt;&gt;&gt; from pathlib import Path\n&gt;&gt;&gt; from iden.shard import TorchSafetensorsShard\n&gt;&gt;&gt; with tempfile.TemporaryDirectory() as tmpdir:\n...     file = Path(tmpdir).joinpath(\"data.safetensors\")\n...     TorchSafetensorsShard.generate_uri_config(file)\n...\n{'kwargs': {'path': '.../data.safetensors'},\n 'loader': {'_target_': 'iden.shard.loader.TorchSafetensorsShardLoader'}}\n</code></pre>"},{"location":"refs/shard/#iden.shard.TorchShard","title":"iden.shard.TorchShard","text":"<p>             Bases: <code>FileShard[Any]</code></p> <p>Implement a PyTorch shard for <code>torch.Tensor</code>s.</p> <p>The data are stored in a PyTorch file.</p> <p>Parameters:</p> Name Type Description Default <code>uri</code> <code>str</code> <p>The shard's URI.</p> required <code>path</code> <code>Path | str</code> <p>Specifies the path to the PyTorch file.</p> required <p>Raises:</p> Type Description <code>RuntimeError</code> <p>if <code>torch</code> is not installed.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import tempfile\n&gt;&gt;&gt; from pathlib import Path\n&gt;&gt;&gt; from iden.shard import TorchShard\n&gt;&gt;&gt; from iden.io import TorchSaver\n&gt;&gt;&gt; with tempfile.TemporaryDirectory() as tmpdir:\n...     file = Path(tmpdir).joinpath(\"data.pt\")\n...     TorchSaver().save({\"key1\": torch.ones(2, 3), \"key2\": torch.arange(5)}, file)\n...     shard = TorchShard(uri=\"file:///data/1234456789\", path=file)\n...     shard.get_data()\n...\n{'key1': tensor([[1., 1., 1.], [1., 1., 1.]]), 'key2': tensor([0, 1, 2, 3, 4])}\n</code></pre>"},{"location":"refs/shard/#iden.shard.TorchShard.generate_uri_config","title":"iden.shard.TorchShard.generate_uri_config  <code>classmethod</code>","text":"<pre><code>generate_uri_config(path: Path) -&gt; dict\n</code></pre> <p>Generate the minimal config that is used to load the shard from its URI.</p> <p>The config must be compatible with the JSON format.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>Path</code> <p>The path to the pickle file.</p> required <p>Returns:</p> Type Description <code>dict</code> <p>The minimal config to load the shard from its URI.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import tempfile\n&gt;&gt;&gt; from pathlib import Path\n&gt;&gt;&gt; from iden.shard import TorchShard\n&gt;&gt;&gt; with tempfile.TemporaryDirectory() as tmpdir:\n...     file = Path(tmpdir).joinpath(\"data.pt\")\n...     TorchShard.generate_uri_config(file)\n...\n{'kwargs': {'path': '.../data.pt'},\n 'loader': {'_target_': 'iden.shard.loader.TorchShardLoader'}}\n</code></pre>"},{"location":"refs/shard/#iden.shard.YamlShard","title":"iden.shard.YamlShard","text":"<p>             Bases: <code>FileShard[Any]</code></p> <p>Implement a YAML shard.</p> <p>The data are stored in a YAML file.</p> <p>Parameters:</p> Name Type Description Default <code>uri</code> <code>str</code> <p>The shard's URI.</p> required <code>path</code> <code>Path | str</code> <p>Specifies the path to the YAML file.</p> required <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import tempfile\n&gt;&gt;&gt; from pathlib import Path\n&gt;&gt;&gt; from iden.shard import YamlShard\n&gt;&gt;&gt; from iden.io import save_yaml\n&gt;&gt;&gt; with tempfile.TemporaryDirectory() as tmpdir:\n...     file = Path(tmpdir).joinpath(\"data.yaml\")\n...     save_yaml([1, 2, 3], file)\n...     shard = YamlShard(uri=\"file:///data/1234456789\", path=file)\n...     shard.get_data()\n...\n[1, 2, 3]\n</code></pre>"},{"location":"refs/shard/#iden.shard.YamlShard.generate_uri_config","title":"iden.shard.YamlShard.generate_uri_config  <code>classmethod</code>","text":"<pre><code>generate_uri_config(path: Path) -&gt; dict\n</code></pre> <p>Generate the minimal config that is used to load the shard from its URI.</p> <p>The config must be compatible with the YAML format.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>Path</code> <p>The path to the yaml file.</p> required <p>Returns:</p> Type Description <code>dict</code> <p>The minimal config to load the shard from its URI.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import tempfile\n&gt;&gt;&gt; from pathlib import Path\n&gt;&gt;&gt; from iden.shard import YamlShard\n&gt;&gt;&gt; with tempfile.TemporaryDirectory() as tmpdir:\n...     file = Path(tmpdir).joinpath(\"data.yaml\")\n...     YamlShard.generate_uri_config(file)\n...\n{'kwargs': {'path': '.../data.yaml'},\n 'loader': {'_target_': 'iden.shard.loader.YamlShardLoader'}}\n</code></pre>"},{"location":"refs/shard/#iden.shard.create_json_shard","title":"iden.shard.create_json_shard","text":"<pre><code>create_json_shard(\n    data: Any, uri: str, path: Path | None = None\n) -&gt; JsonShard\n</code></pre> <p>Create a <code>JsonShard</code> from data.</p> Note <p>It is a utility function to create a <code>JsonShard</code> from its     data and URI. It is possible to create a <code>JsonShard</code>     in other ways.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>Any</code> <p>The data to save in the json file.</p> required <code>uri</code> <code>str</code> <p>The shard's URI.</p> required <code>path</code> <code>Path | None</code> <p>The path to the JSON file. If <code>None</code>, a path is automatically based on the URI.</p> <code>None</code> <p>Returns:</p> Type Description <code>JsonShard</code> <p>The <code>JsonShard</code> object.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import tempfile\n&gt;&gt;&gt; from pathlib import Path\n&gt;&gt;&gt; from iden.shard import create_json_shard\n&gt;&gt;&gt; with tempfile.TemporaryDirectory() as tmpdir:\n...     shard = create_json_shard([1, 2, 3], uri=Path(tmpdir).joinpath(\"my_uri\").as_uri())\n...     shard.get_data()\n...\n[1, 2, 3]\n</code></pre>"},{"location":"refs/shard/#iden.shard.create_pickle_shard","title":"iden.shard.create_pickle_shard","text":"<pre><code>create_pickle_shard(\n    data: Any, uri: str, path: Path | None = None\n) -&gt; PickleShard\n</code></pre> <p>Create a <code>PickleShard</code> from data.</p> Note <p>It is a utility function to create a <code>PickleShard</code> from its     data and URI. It is possible to create a <code>PickleShard</code>     in other ways.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>Any</code> <p>The data to save in the pickle file.</p> required <code>uri</code> <code>str</code> <p>The shard's URI.</p> required <code>path</code> <code>Path | None</code> <p>The path to the pickle file. If <code>None</code>, a path is automatically based on the URI.</p> <code>None</code> <p>Returns:</p> Type Description <code>PickleShard</code> <p>The <code>PickleShard</code> object.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import tempfile\n&gt;&gt;&gt; from pathlib import Path\n&gt;&gt;&gt; from iden.shard import create_pickle_shard\n&gt;&gt;&gt; with tempfile.TemporaryDirectory() as tmpdir:\n...     shard = create_pickle_shard([1, 2, 3], uri=Path(tmpdir).joinpath(\"my_uri\").as_uri())\n...     shard.get_data()\n...\n[1, 2, 3]\n</code></pre>"},{"location":"refs/shard/#iden.shard.create_shard_dict","title":"iden.shard.create_shard_dict","text":"<pre><code>create_shard_dict(\n    shards: dict[str, BaseShard], uri: str\n) -&gt; ShardDict\n</code></pre> <p>Create a <code>ShardDict</code> a list of shards.</p> Note <p>It is a utility function to create a <code>ShardDict</code> from its     shards and URI. It is possible to create a <code>ShardDict</code>     in other ways.</p> <p>Parameters:</p> Name Type Description Default <code>shards</code> <code>dict[str, BaseShard]</code> <p>The shards.</p> required <code>uri</code> <code>str</code> <p>The shard's URI.</p> required <p>Returns:</p> Type Description <code>ShardDict</code> <p>The <code>ShardDict</code> object.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import tempfile\n&gt;&gt;&gt; from pathlib import Path\n&gt;&gt;&gt; from iden.shard import ShardDict, create_json_shard, create_shard_dict\n&gt;&gt;&gt; with tempfile.TemporaryDirectory() as tmpdir:\n...     shards = {\n...         \"train\": create_json_shard(\n...             [1, 2, 3], uri=Path(tmpdir).joinpath(\"shard/uri1\").as_uri()\n...         ),\n...         \"val\": create_json_shard(\n...             [4, 5, 6, 7], uri=Path(tmpdir).joinpath(\"shard/uri2\").as_uri()\n...         ),\n...     }\n...     shard = create_shard_dict(shards, uri=Path(tmpdir).joinpath(\"uri\").as_uri())\n...     shard\n...\nShardDict(\n  (uri): file:///.../uri\n  (shards):\n    (train): JsonShard(uri=file:///.../shard/uri1)\n    (val): JsonShard(uri=file:///.../shard/uri2)\n)\n</code></pre>"},{"location":"refs/shard/#iden.shard.create_shard_tuple","title":"iden.shard.create_shard_tuple","text":"<pre><code>create_shard_tuple(\n    shards: Iterable[BaseShard], uri: str\n) -&gt; ShardTuple\n</code></pre> <p>Create a <code>ShardTuple</code> a list of shards.</p> Note <p>It is a utility function to create a <code>ShardTuple</code> from its     shards and URI. It is possible to create a <code>ShardTuple</code>     in other ways.</p> <p>Parameters:</p> Name Type Description Default <code>shards</code> <code>Iterable[BaseShard]</code> <p>The shards.</p> required <code>uri</code> <code>str</code> <p>The shard's URI.</p> required <p>Returns:</p> Type Description <code>ShardTuple</code> <p>The <code>ShardTuple</code> object.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import tempfile\n&gt;&gt;&gt; from pathlib import Path\n&gt;&gt;&gt; from iden.shard import ShardTuple, create_json_shard, create_shard_tuple\n&gt;&gt;&gt; with tempfile.TemporaryDirectory() as tmpdir:\n...     shards = [\n...         create_json_shard(\n...             [1, 2, 3], uri=Path(tmpdir).joinpath(\"shard/uri1\").as_uri()\n...         ),\n...         create_json_shard(\n...             [4, 5, 6, 7], uri=Path(tmpdir).joinpath(\"shard/uri2\").as_uri()\n...         ),\n...     ]\n...     shard = create_shard_tuple(shards, uri=Path(tmpdir).joinpath(\"uri\").as_uri())\n...     shard\n...\nShardTuple(\n  (uri): file:///.../uri\n  (shards):\n    (0): JsonShard(uri=file:///.../shard/uri1)\n    (1): JsonShard(uri=file:///.../shard/uri2)\n)\n</code></pre>"},{"location":"refs/shard/#iden.shard.create_torch_safetensors_shard","title":"iden.shard.create_torch_safetensors_shard","text":"<pre><code>create_torch_safetensors_shard(\n    data: dict[str, Tensor],\n    uri: str,\n    path: Path | None = None,\n) -&gt; TorchSafetensorsShard\n</code></pre> <p>Create a <code>TorchSafetensorsShard</code> from data.</p> Note <p>It is a utility function to create a <code>TorchSafetensorsShard</code>     from its data and URI. It is possible to create a     <code>TorchSafetensorsShard</code> in other ways.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>dict[str, Tensor]</code> <p>The data to save in the safetensors file.</p> required <code>uri</code> <code>str</code> <p>The shard's URI.</p> required <code>path</code> <code>Path | None</code> <p>The path to the safetensors file. If <code>None</code>, a path is automatically based on the URI.</p> <code>None</code> <p>Returns:</p> Type Description <code>TorchSafetensorsShard</code> <p>The <code>TorchSafetensorsShard</code> object.</p> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>if <code>safetensors</code> or <code>torch</code> is not installed.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import tempfile\n&gt;&gt;&gt; from pathlib import Path\n&gt;&gt;&gt; import torch\n&gt;&gt;&gt; from iden.shard import create_torch_safetensors_shard\n&gt;&gt;&gt; with tempfile.TemporaryDirectory() as tmpdir:\n...     shard = create_torch_safetensors_shard(\n...         data={\"key1\": torch.ones(2, 3), \"key2\": torch.arange(5)},\n...         uri=Path(tmpdir).joinpath(\"my_uri\").as_uri()\n...     )\n...     shard.get_data()\n...\n{'key1': tensor([[1., 1., 1.], [1., 1., 1.]]), 'key2': tensor([0, 1, 2, 3, 4])}\n</code></pre>"},{"location":"refs/shard/#iden.shard.create_torch_shard","title":"iden.shard.create_torch_shard","text":"<pre><code>create_torch_shard(\n    data: Any, uri: str, path: Path | None = None\n) -&gt; TorchShard\n</code></pre> <p>Create a <code>TorchShard</code> from data.</p> Note <p>It is a utility function to create a <code>TorchShard</code> from its     data and URI. It is possible to create a <code>TorchShard</code>     in other ways.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>Any</code> <p>The data to save in the PyTorch file.</p> required <code>uri</code> <code>str</code> <p>The shard's URI.</p> required <code>path</code> <code>Path | None</code> <p>The path to the PyTorch file. If <code>None</code>, a path is automatically based on the URI.</p> <code>None</code> <p>Returns:</p> Type Description <code>TorchShard</code> <p>The <code>TorchShard</code> object.</p> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>if <code>torch</code> is not installed.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import tempfile\n&gt;&gt;&gt; from pathlib import Path\n&gt;&gt;&gt; import torch\n&gt;&gt;&gt; from iden.shard import create_torch_shard\n&gt;&gt;&gt; with tempfile.TemporaryDirectory() as tmpdir:\n...     shard = create_torch_shard(\n...         data={\"key1\": torch.ones(2, 3), \"key2\": torch.arange(5)},\n...         uri=Path(tmpdir).joinpath(\"my_uri\").as_uri()\n...     )\n...     shard.get_data()\n...\n{'key1': tensor([[1., 1., 1.], [1., 1., 1.]]), 'key2': tensor([0, 1, 2, 3, 4])}\n</code></pre>"},{"location":"refs/shard/#iden.shard.create_yaml_shard","title":"iden.shard.create_yaml_shard","text":"<pre><code>create_yaml_shard(\n    data: Any, uri: str, path: Path | None = None\n) -&gt; YamlShard\n</code></pre> <p>Create a <code>YamlShard</code> from data.</p> Note <p>It is a utility function to create a <code>YamlShard</code> from its     data and URI. It is possible to create a <code>YamlShard</code>     in other ways.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>Any</code> <p>The data to save in the yaml file.</p> required <code>uri</code> <code>str</code> <p>The shard's URI.</p> required <code>path</code> <code>Path | None</code> <p>The path to the YAML file. If <code>None</code>, a path is automatically based on the URI.</p> <code>None</code> <p>Returns:</p> Type Description <code>YamlShard</code> <p>The <code>YamlShard</code> object.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import tempfile\n&gt;&gt;&gt; from pathlib import Path\n&gt;&gt;&gt; from iden.shard import create_yaml_shard\n&gt;&gt;&gt; with tempfile.TemporaryDirectory() as tmpdir:\n...     shard = create_yaml_shard([1, 2, 3], uri=Path(tmpdir).joinpath(\"my_uri\").as_uri())\n...     shard.get_data()\n...\n[1, 2, 3]\n</code></pre>"},{"location":"refs/shard/#iden.shard.get_dict_uris","title":"iden.shard.get_dict_uris","text":"<pre><code>get_dict_uris(\n    shards: dict[str, BaseShard]\n) -&gt; dict[str, str]\n</code></pre> <p>Get the dictionary of shard's URI.</p> <p>Parameters:</p> Name Type Description Default <code>shards</code> <code>dict[str, BaseShard]</code> <p>The dictionary of shards.</p> required <p>Returns:</p> Type Description <code>dict[str, str]</code> <p>The dictionary of shard's URI.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import tempfile\n&gt;&gt;&gt; from pathlib import Path\n&gt;&gt;&gt; from iden.shard import create_json_shard, get_dict_uris\n&gt;&gt;&gt; with tempfile.TemporaryDirectory() as tmpdir:\n...     shards = {\n...         \"train\": create_json_shard(\n...             [1, 2, 3], uri=Path(tmpdir).joinpath(\"shard/uri1\").as_uri()\n...         ),\n...         \"val\": create_json_shard(\n...             [4, 5, 6, 7], uri=Path(tmpdir).joinpath(\"shard/uri2\").as_uri()\n...         ),\n...     }\n...     get_dict_uris(shards)\n...\n{'train': 'file:///.../shard/uri1', 'val': 'file:///.../shard/uri2'}\n</code></pre>"},{"location":"refs/shard/#iden.shard.get_list_uris","title":"iden.shard.get_list_uris","text":"<pre><code>get_list_uris(shards: Iterable[BaseShard]) -&gt; list[str]\n</code></pre> <p>Get the list of shard's URI.</p> <p>Parameters:</p> Name Type Description Default <code>shards</code> <code>Iterable[BaseShard]</code> <p>The shards.</p> required <p>Returns:</p> Type Description <code>list[str]</code> <p>The tuple of shard's URI.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import tempfile\n&gt;&gt;&gt; from pathlib import Path\n&gt;&gt;&gt; from iden.shard import get_list_uris, create_json_shard\n&gt;&gt;&gt; with tempfile.TemporaryDirectory() as tmpdir:\n...     shards = [\n...         create_json_shard([1, 2, 3], uri=Path(tmpdir).joinpath(\"shard/uri1\").as_uri()),\n...         create_json_shard(\n...             [4, 5, 6, 7], uri=Path(tmpdir).joinpath(\"shard/uri2\").as_uri()\n...         ),\n...     ]\n...     get_list_uris(shards)\n...\n['file:///.../shard/uri1', 'file:///.../shard/uri2']\n</code></pre>"},{"location":"refs/shard/#iden.shard.load_from_uri","title":"iden.shard.load_from_uri","text":"<pre><code>load_from_uri(uri: str) -&gt; BaseShard\n</code></pre> <p>Load a shard from its Uniform Resource Identifier (URI).</p> <p>Parameters:</p> Name Type Description Default <code>uri</code> <code>str</code> <p>The URI of the shard.</p> required <p>Returns:</p> Type Description <code>BaseShard</code> <p>The shard associated to the URI.</p> <p>Raises:</p> Type Description <code>FileNotFoundError</code> <p>if the URI file does not exist.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import tempfile\n&gt;&gt;&gt; from pathlib import Path\n&gt;&gt;&gt; from iden.shard import create_json_shard, load_from_uri\n&gt;&gt;&gt; with tempfile.TemporaryDirectory() as tmpdir:\n...     uri = Path(tmpdir).joinpath(\"my_uri\").as_uri()\n...     _ = create_json_shard([1, 2, 3], uri=uri)\n...     shard = load_from_uri(uri)\n...     shard\n...\nJsonShard(uri=file:///.../my_uri)\n</code></pre>"},{"location":"refs/shard/#iden.shard.sort_by_uri","title":"iden.shard.sort_by_uri","text":"<pre><code>sort_by_uri(\n    shards: Iterable[BaseShard], /, *, reverse: bool = False\n) -&gt; list[BaseShard]\n</code></pre> <p>Sort a sequence of shards by their URIs.</p> <p>Parameters:</p> Name Type Description Default <code>shards</code> <code>Iterable[BaseShard]</code> <p>The shards to sort.</p> required <code>reverse</code> <code>bool</code> <p>If set to <code>True</code>, then the list elements are sorted as if each comparison were reversed.</p> <code>False</code> <p>Returns:</p> Type Description <code>list[BaseShard]</code> <p>The sorted shards.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import tempfile\n&gt;&gt;&gt; from pathlib import Path\n&gt;&gt;&gt; from iden.shard import create_json_shard, sort_by_uri\n&gt;&gt;&gt; with tempfile.TemporaryDirectory() as tmpdir:\n...     shards = sort_by_uri(\n...         [\n...             create_json_shard([1, 2, 3], uri=Path(tmpdir).joinpath(\"uri2\").as_uri()),\n...             create_json_shard([4, 5, 6, 7], uri=Path(tmpdir).joinpath(\"uri3\").as_uri()),\n...             create_json_shard([4, 5, 6, 7], uri=Path(tmpdir).joinpath(\"uri1\").as_uri()),\n...         ]\n...     )\n...     shards\n...\n[JsonShard(uri=file:///.../uri1), JsonShard(uri=file:///.../uri2), JsonShard(uri=file:///.../uri3)]\n</code></pre>"},{"location":"refs/utils/","title":"Utils","text":""},{"location":"refs/utils/#iden.utils","title":"iden.utils","text":"<p>Contain the utility functions.</p>"}]}